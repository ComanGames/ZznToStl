<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>LogicNP.FileView.WPF</name>
    </assembly>
    <members>
        <member name="N:LogicNP.FileViewControl">
            <summary>Classes in the LogicNP.FileViewControl Namespace</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.AllItemsCheckState">
            <summary>Indicates the combined checkstate of all items in FileView.</summary>
            <remarks>    This enumeration is used with the          GetAllItemsCheckState method of     FileView.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.AllItemsCheckState.AllChecked">
            <summary>Indicates that all items are checked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.AllItemsCheckState.AllUnchecked">
            <summary>Indicates that all items are unchecked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.AllItemsCheckState.SomeChecked">
            <summary>Indicates that some, but not all items are checked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.AllItemsCheckState.NoItems">
            <summary>Indicates that there are currently no items in FileView.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.AutoBoolean">
            <summary>Specifies an enumeration consisting of a True, False and 'Auto' value.</summary>
            <remarks>This enumeration is used with the  SelectedItemHasBorder property.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.AutoBoolean.False">
            <summary>Indicates a False value.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.AutoBoolean.True">
            <summary>Indicates a True value.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.AutoBoolean.Auto">
            <summary>Indicates an 'Automatic' value.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.BorderStyles">
            <summary>Specifies the border style of FileView</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.BorderStyles.None">
            <summary>The control does not have any border</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.BorderStyles.Flat">
            <summary>The control has a flat border</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.BorderStyles.Sunken">
            <summary>The control has a 3D sunken border</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.CheckTypes">
            <summary>Specifies constants for use in the CheckItems method</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.CheckTypes.All">
            <summary>All items should be checked</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.CheckTypes.None">
            <summary>All items should be unchecked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.CheckTypes.Invert">
            <summary>Checked items should be unchecked and unchecked items are checked.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ColumnTextJustificationStyles">
            <summary>Specifies how the column text is justified</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnTextJustificationStyles.Left">
            <summary>The column text is left-justified</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnTextJustificationStyles.Right">
            <summary>The column text is right-justified</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnTextJustificationStyles.Center">
            <summary>The column text is center-justified</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.DisplayNameFlags">
            <summary>Indicates how the display name of an item is retrieved.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DisplayNameFlags.Normal">
            <summary>Indicates that the normal display name should be retrieved.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DisplayNameFlags.InFolder">
            <summary>Indicates that the in-folder display name should be retrieved.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DisplayNameFlags.ForEditing">
            <summary>Indicates that the display name suitable during an edit operation should be retrieved.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DisplayNameFlags.ForAddressBar">
            <summary>Indicates that a display name suitable for displaying in the address-bar should be retrieved.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DisplayNameFlags.ForParsing">
            <summary>Indicates that the fully qualified parsable display name should be retrieved.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DisplayNameFlags.ShortcutTarget">
            <summary>Indicates that the target of the shortcut should be retrieved.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.DragDropSettings">
            <summary>Specifies what type of dragdrop actions are allowed</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.DragDropSettings.NoDragDrop">
            <summary>Specifies that no drag-drop is allowed in FIleView</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DragDropSettings.RestrictWithinFileView">
            <summary>Specifies that drag-drop functionality is only restricted within FIleView</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DragDropSettings.AllowDropOnExternalWindow">
            <summary>Specifies that items dragged from FileView can be dropped on external windows</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DragDropSettings.AllowDropFromExternalWindow">
            <summary>Specifies that items from an external source can be dropped in FIleView.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DragDropSettings.UnRestricted">
            <summary>Specifies that drag-drop functionality is unrestricted.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.DriveType">
            <summary>Defines constants which indicate various drive types.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DriveType.Unknown">
            <summary>    Indicates that the drive type cannot be     determined.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DriveType.NotRootDirectory">
            <summary>    Indicates that he root path is invalid; for example,     there is no volume is mounted at the path.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DriveType.Removable">
            <summary>    Indicates that he drive has removable media; for example,     a floppy drive, thumb drive, or flash card reader.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DriveType.Fixed">
            <summary>    Indicates that he drive has fixed media; for example, a     hard drive or flash drive.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DriveType.Remote">
            <summary>    Indicates that he drive is a remote (network)     drive.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DriveType.CDROM">
            <summary>Indicates that he drive is a CD-ROM drive.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.DriveType.RAMDisk">
            <summary>Indicates that he drive is a RAM disk.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewDrawMode">
            <summary>Defines constants which indicate how items in FileView are drawn.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDrawMode.Normal">
            <summary>Indicates that items in FileView are drawn normally.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDrawMode.OwnerDraw">
            <summary>Indicates that items in FileView are drawn using custom draw using the  DrawItem Event.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewImageLists">
            <summary>Specifies the imagelist when custom icons and overlay icons are added to FileView.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewImageLists.Large">
            <summary>Specifies the large imagelist used in LargeIcon view.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewImageLists.Small">
            <summary>Specifies the small imagelist used in SmallIcon, List and Details view.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewImageLists.Thumbnail">
            <summary>Specifies the thumbnail imagelist used in Thumbnail view</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewImageLists.ThumbnailFramed">
            <summary>Same as Thumbnail, except that icons added to the thumbnail imagelist are framed with a gray border before being added.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewImageLists.ThumbnailOverlayIcon">
            <summary>Specifies that an thumbnail overlay icon should be created from the image being added.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.HeaderAreas">
            <summary>Indicates FileView column header areas.</summary>
            <remarks>This enumeration is used in the  HeaderRightClickEventArgs passed to the  HeaderRightClick event of FileView.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderAreas.Nowhere">
            <summary>Indicates the area not occupied by any column headers.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderAreas.OnHeader">
            <summary>Indicates a column header area.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderAreas.OnDivider">
            <summary>Indicates the divider area between two column headers.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderAreas.OnDivderOpen">
            <summary>Indicates the divider area of a column header whose width is zero.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.HeaderSortArrowImageStyles">
            <summary>Specifies the type of sort arrow displayed in column headers in FileView in Details mode.</summary>
            <remarks>This enumeration is used with the  HeaderSortArrowImageStyle property of  FileView.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderSortArrowImageStyles.NoImage">
            <summary>Specifies that no sort arrow image is displayed</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderSortArrowImageStyles.ImageToLeft">
            <summary>Specifies that the sort arrow image is displayed to the left of the column name.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderSortArrowImageStyles.ImageToRight">
            <summary>Specifies that the sort arrow image is displayed to the right of the column name</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderSortArrowImageStyles.WinXPThemeImage">
            <summary>Specifies that a Windows XP Theme styled sort image should be displayed.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderSortArrowImageStyles.Default">
            <summary>Specifies that the default style should be used for sort arrow images. If the current OS is Windows XP and visual styles are enabled, then WinXPThemeImage is used, otherwise ImageToRight is used.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.HitTestInformation">
            <summary>Indicates various regions in FileView.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HitTestInformation.Nowhere">
            <summary>Indicates the area not occupied by any items.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HitTestInformation.OnItemIcon">
            <summary>Indicates the area occupied by the icon of an item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HitTestInformation.OnItemText">
            <summary>Indicates the area not occupied by the text of an item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HitTestInformation.OnItemCheckBox">
            <summary>Indicates the area not occupied by the checkbox of an item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HitTestInformation.OnItem">
            <summary>Indicates the area not occupied by either the icon, text or the checkbox of an item.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.IconArrangement">
            <summary>Gets/Sets how items in FileView are arranged.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.IconArrangement.TopToBottom">
            <summary>Indicates that icons are arranged from top to bottom.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.IconArrangement.LeftToRight">
            <summary>Indicates that icons are arranged from left to right.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemActivationStyle">
            <summary>Specifies various item activation styles for items in FileView.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemActivationStyle.NoActivation">
            <summary>Specifies that items should be activated using the default method.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemActivationStyle.OneClickActivation">
            <summary>Specifies that items should be activated using a single click.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemActivationStyle.TwoClickActivation">
            <summary>Specifies that items should be activated using two clicks.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemArea">
            <summary>Defines constants which indicate various areas of an item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemArea.Entire">
            <summary>Specifies the entire area occupied with the item, including the column area (in details view).</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemArea.Icon">
            <summary>Specifies the area occupied by the icon of the item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemArea.Label">
            <summary>Specifies the area occupied by the label of the item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemArea.ItemOnly">
            <summary>Specifies the area occupied by the icon and label of the item.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemAttributes">
            <summary>Specifies various attributes for an item.</summary>
            <remarks>Please see the MSDN Platform SDK documentation of IShellFolder.GetAttributesOf for more information on each of these attributes.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.None">
            <summary>None</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.All">
            <summary>All the attributes</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.CanCopy">
            <summary>The item can be copied</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.CanMove">
            <summary>The item can be moved</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.CanLink">
            <summary>Shortcuts can be created for the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Storage">
            <summary>The item has storage</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.CanRename">
            <summary>The item can be renamed</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.CanDelete">
            <summary>The item can be deleted</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.HasPropsheet">
            <summary>The item has a property sheet</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Droptarget">
            <summary>The item is a drop targets</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.CapabilityMask">
            <summary>This flag is a mask for the capability flags</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Encrypted">
            <summary>The item is encrypted</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.IsSlow">
            <summary>The item is 'slow'.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Ghosted">
            <summary>The item is displayed using a ghosted icon</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Link">
            <summary>The item is a shortcut.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Share">
            <summary>The item is shared.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Readonly">
            <summary>The item is read-only.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Hidden">
            <summary>The item is hidden</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.DisplayAttrMask">
            <summary>This flag is a mask for the display attributes</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.FilesysAncestor">
            <summary>The item contains one or more file system folders</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Folder">
            <summary>The item is a folder.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.FileSys">
            <summary>The item is part of the file system (that is, it is a file, directory, or root directory).</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.HasSubfolder">
            <summary>The item has sub folders</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.ContentsMask">
            <summary>This flag is a mask for the contents attributes</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Validate">
            <summary>Not Used.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Removable">
            <summary>The item is on removable media</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Compressed">
            <summary>The item are compressed</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Browsable">
            <summary>The item can be browsed in place.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Nonenumerated">
            <summary>The item is a nonenumerated item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.NewContent">
            <summary>The item contains new content.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.CanMoniker">
            <summary>None</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.HasStorage">
            <summary>None</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.Stream">
            <summary>None</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.StorageAncestor">
            <summary>None</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemAttributes.StorageCapMask">
            <summary>None</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemCheckStates">
            <summary>Specifies the check state of an item in FileView.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemCheckStates.NoCheckBoxes">
            <summary>Indicates that FileView is not currently showing check boxes.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemCheckStates.UnChecked">
            <summary>Indicates that the item is unchecked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemCheckStates.Checked">
            <summary>Indicates that the item is checked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemCheckStates.ChildChecked">
            <summary>Indicates that the item is unchecked, but some children might be checked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemCheckStates.SelfAndChildChecked">
            <summary>Indicates that the item is checked, and some, but not all children are checked.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemStates">
            <summary>Specifies the states of an item in FileView.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemStates.Focused">
            <summary>The item has the input focus.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemStates.Selected">
            <summary>The item is selected.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemStates.Cut">
            <summary>The item is cut (drawn with a ghosted icon).</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemStates.Hilighted">
            <summary>The item is hilighted (for example, it is a target of a drag-drop operation).</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemUnderliningStyle">
            <summary>Specifies how items in FileView are underlined.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemUnderliningStyle.NoUnderlines">
            <summary>Specifies that items should not be underlined.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemUnderliningStyle.UnderlineHotItems">
            <summary>Specifies that only hot items should be underlined.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemUnderliningStyle.UnderlineColdItems">
            <summary>Specifies that only cold items should be underlined.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemUnderliningStyle.UnderlineAllItems">
            <summary>Specifies that both hot and cold items should be underlined.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ListItemStates">
            <summary>Defines constants that indicate the states of an item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Selected">
            <summary>Indicates that the item is selected.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Grayed">
            <summary>Indicates that the item is disabled.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Disabled">
            <summary>Indicates that the item is disabled.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Checked">
            <summary>Indicates that the item is checked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Focused">
            <summary>Indicates that the item has focus.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Default">
            <summary>Indicates that the item is in its default state.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Hot">
            <summary>Indicates that the item is currently under the mouse pointer.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Marked">
            <summary>Indicates that the item is marked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.Indeterminate">
            <summary>Indicates that the item is in an indeterminate state.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ListItemStates.ShowKeyboardCues">
            <summary>Indicates that the item should indicate a keyboard shortcut.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.MenuItemStates">
            <summary>    Obsolete.     Specifies the state of menu items</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.MenuItemStates.Default">
            <summary>The menuitem should only display the text</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.MenuItemStates.Checked">
            <summary>The menuitem should display a check mark in addition to the text</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.MenuItemStates.Disabled">
            <summary>The menuitem should be disabled</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.MenuItemStates.Separator">
            <summary>The menuitem should be a separator</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.OverlayIcons">
            <summary>Specifies which overlay icons should be displayed for an item</summary>
            <remarks>For information on how to display a custom overlay icon for an item, see the documentation of the  SetOverlayIcon method of  FileView.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.OverlayIcons.None">
            <summary>The item does not have any overlay icon.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.OverlayIcons.Share">
            <summary>The share overlay icon should be displayed for an item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.OverlayIcons.Shortcut">
            <summary>The shortcut overlay icon should be displayed for an item.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.SelectTypes">
            <summary>Specifies constants for use in the  SelectItems method</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SelectTypes.All">
            <summary>All items should be selected.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SelectTypes.None">
            <summary>All items should be de-selected.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SelectTypes.Invert">
            <summary>Selected items should be de-selected and de-selected items should be selected.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ShellCommands">
            <summary>Specifies shell commands.</summary>
            <remarks>This enumeration is used with the  ExecuteCmdForAllSelected and  ExecuteCmdForFolder methods of  FileView and the  ExecuteShellCommand method of  Listitem.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Unknown">
            <summary>Indicates an unknown command.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Open">
            <summary>Opens the item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Explore">
            <summary>Opens Explorer in the folder specified by the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Properties">
            <summary>Shows the 'Properties' dialog box of the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Cut">
            <summary>Cuts the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Copy">
            <summary>Copies the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Paste">
            <summary>Pastes clipboard contents in the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Delete">
            <summary>Deletes the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.CreateShortcut">
            <summary>Creates a shortcut to the item</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Find">
            <summary>Opens the 'Find Files..' dialog box for the item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Print">
            <summary>Prints the item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Rename">
            <summary>Starts in-place renaming of the item in FileView.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellCommands.Default">
            <summary>Indicates the default command for the item.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ShellIconTypes">
            <summary>Specifies various types of shell icons.</summary>
            <remarks>This enumeration is used by the  GetShellIcon method of  ListItem and the  GetShellIconFromPIDL method of  Utilities.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellIconTypes.Small">
            <summary>Specifies the small shell icon</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellIconTypes.Large">
            <summary>Specifies the large shell icon</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellIconTypes.ExtraLarge">
            <summary>Specifies the extra-large sized shell icon (available only on Windows XP and above)</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ShellIconTypes.Thumbnail">
            <summary>Specifies the thumbnail icon</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.SortMethods">
            <summary>Specifies how a column should be sorted.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortMethods.DefaultSorting">
            <summary>FileView should use default sorting; the items sort as they would in Windows Explorer.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortMethods.StringSorting">
            <summary>FileView should sort items using a string comparison. Thus "19" would be displayed before "9".</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortMethods.NumberSorting">
            <summary>FileView should sort items by numerical value of the text displayed in a column. Thus "9" would be displayed before "19".</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortMethods.CustomSorting">
            <summary>FileView should sort items using a custom procedure defined by the programmer. The  CompareItems event is repeatedly called to determine the comparison between two items.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortMethods.NoSorting">
            <summary>FileView should not sort items.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.SortOrders">
            <summary>Specifies how a column should be sorted.</summary>
            <remarks>This enumeration is used with the  SortByColumn and  GetSortOrder methods of  FileView.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.SortOrders.None">
            <summary>Not used.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortOrders.Ascending">
            <summary>The column should be sorted in ascending order.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortOrders.Descending">
            <summary>The column should be sorted in descending order.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SortOrders.Toggle">
            <summary>The sorting for a column should be inverted.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.SpecialFolders">
            <summary>Specifies various system-defined special folders</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.DESKTOP">
            <summary>Windows Desktop—virtual folder that is the root of the namespace.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.INTERNET">
            <summary>Virtual folder representing the Internet.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.PROGRAMS">
            <summary>File system directory that contains the user's program groups (which are also file system directories). A typical path is C:\Documents and Settings\username\Start Menu\Programs.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.CONTROLS">
            <summary>Virtual folder containing icons for the Control Panel applications.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.PRINTERS">
            <summary>Virtual folder containing installed printers</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.PERSONAL">
            <summary>File system directory that serves as a common repository for documents. A typical path is C:\Documents and Settings\username\My Documents.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.FAVORITES">
            <summary>File system directory that serves as a common repository for the user's favorite items. A typical path is C:\Documents and Settings\username\Favorites.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.STARTUP">
            <summary>File system directory that corresponds to the user's Startup program group</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.RECENT">
            <summary>File system directory that contains the user's most recently used documents. A typical path is C:\Documents and Settings\username\Recent.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.SENDTO">
            <summary>File system directory that contains Send To menu items. A typical path is C:\Documents and Settings\username\SendTo.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.BITBUCKET">
            <summary>Virtual folder containing the objects in the user's Recycle Bin.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.STARTMENU">
            <summary>File system directory containing Start menu items. A typical path is C:\Documents and Settings\username\Start Menu.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.DESKTOPDIRECTORY">
            <summary>File system directory used to physically store file objects on the desktop (not to be confused with the desktop folder itself). A typical path is C:\Documents and Settings\username\Desktop</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.DRIVES">
            <summary>My Computer—virtual folder containing everything on the local computer: storage devices, printers, and Control Panel. The folder may also contain mapped network drives.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.NETWORK">
            <summary>Network Neighborhood—virtual folder representing the root of the network namespace hierarchy.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.NETHOOD">
            <summary>A file system folder containing the link objects that may exist in the My Network Places virtual folder.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.FONTS">
            <summary>Virtual folder containing fonts. A typical path is C:\WINNT\Fonts.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.TEMPLATES">
            <summary>File system directory that serves as a common repository for document templates.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.APPDATA">
            <summary>File system directory that serves as a common repository for application-specific data. A typical path is C:\Documents and Settings\username\Application Data.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.PRINTHOOD">
            <summary>File system directory that contains the link objects that may exist in the Printers virtual folder. A typical path is C:\Documents and Settings\username\PrintHood.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.ALTSTARTUP">
            <summary>File system directory that corresponds to the user's nonlocalized Startup program group.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.INTERNET_CACHE">
            <summary>File system directory that serves as a common repository for temporary Internet files. A typical path is C:\Documents and Settings\username\Temporary Internet Files.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.COOKIES">
            <summary>File system directory that serves as a common repository for Internet cookies. A typical path is C:\Documents and Settings\username\Cookies.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.SpecialFolders.HISTORY">
            <summary>File system directory that serves as a common repository for Internet history items.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.StandardSystemIcon">
            <summary>Specifies standard system icons.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.StandardSystemIcon.BlankDocument">
            <summary>Specifies the standard 'Blank Document' system icon.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.StandardSystemIcon.Application">
            <summary>Specifies the standard 'Application' system icon.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.StandardSystemIcon.ClosedFolder">
            <summary>Specifies the standard 'Closed Folder' system icon.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.StandardSystemIcon.OpenFolder">
            <summary>Specifies the standard 'Opened Folder' system icon.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ViewStyles">
            <summary>Specifies the viewstyle used by FileView to display items.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ViewStyles.LargeIcon">
            <summary>The items are shown with large icons.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ViewStyles.Report">
            <summary>The items are shown in 'Details Mode' with small icons and extra information like size,type, created and modified date etc.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ViewStyles.Smallicon">
            <summary>The items are shown with small icons.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ViewStyles.List">
            <summary>The items are shown listed with small icons.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ViewStyles.Thumbnails">
            <summary>The items are shown with large thumbnails.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.BackgroundClickedEventArgs">
            <summary>Provides data for the BackgroundRightClicked event</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.BackgroundClickedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes new instance of  BackgroundClickedEventArgs class</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.BackgroundClickedEventArgs.x">
            <summary>Gets the x-coordinate of the point where the right-click occurred.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.BackgroundClickedEventArgs.y">
            <summary>Gets the y-coordinate of the point where the right-click occurred.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeShellCommandExecuteEventArgs">
            <summary>Provides data for the BeforeShellCommandExecute event</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.BeforeShellCommandExecuteEventArgs.#ctor(System.String,LogicNP.FileViewControl.ShellCommands)">
            <summary>Initializes new instance of  BeforeShellCommandExecuteEventArgs class</summary>
            <returns>BeforeShellCommandExecuteEventArgs</returns>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.BeforeShellCommandExecuteEventArgs.Command">
            <summary>Gets the command which is being executed.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.BeforeShellCommandExecuteEventArgs.CommandStr">
            <summary>Gets the text of the command being executed.</summary>
            <remarks>If the command being executed is one of the pre-defined system commands such as 'cut', 'copy', 'open', etc, the  Command field can be used to identify the command.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.ColumnAddEventArgs">
            <summary>Provides data for the BeforeColumnAdd event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.ColumnAddEventArgs.#ctor(System.String,System.Boolean)">
            <summary>Initializes new instance of  ColumnAddEventArgs class.</summary>
            <returns>ColumnAddEventArgs</returns>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnAddEventArgs.Cancel">
            <summary>Gets/sets whether the event should be cancelled.</summary>
            <remarks>Setting this field to True prevents the column from being added to FileView.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnAddEventArgs.ColumnName">
            <summary>Gets the name of the column.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.ColumnSortEventArgs">
            <summary>Provides data for the BeforeColumnSort event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.ColumnSortEventArgs.#ctor(System.String,System.Int32)">
            <summary>Initializes new instance of  ColumnSortEventArgs class.</summary>
            <returns>ColumnSortEventArgs</returns>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnSortEventArgs.ColumnIndex">
            <summary>Gets the 0-based index of the column which is being sorted.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnSortEventArgs.ColumnName">
            <summary>Gets the name of the column which is being sorted</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ColumnSortEventArgs.SortMethod">
            <summary>Gets/sets the type of sorting to be performed on the column.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.CompareItemsEventArgs">
            <summary>Provides data for the CompareItems event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.CompareItemsEventArgs.#ctor(LogicNP.FileViewControl.ListItem,LogicNP.FileViewControl.ListItem)">
            <summary>Initializes new instance of  CompareItemsEventArgs class.</summary>
            <returns>CompareItemsEventArgs</returns>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.CompareItemsEventArgs.Comparison">
            <summary>Gets/Sets the result of the comparison.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.CompareItemsEventArgs.Item1">
            <summary>Gets the first item to be compared.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.CompareItemsEventArgs.Item2">
            <summary>Gets the second item to be compared.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ContextMenuHintEventArgs">
            <summary>Provides data for the ContextMenuHint event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.ContextMenuHintEventArgs.#ctor(System.String)">
            <summary>Initializes new instance of  ContextMenuHintEventArgs class.</summary>
            <returns>ContextMenuHintEventArgs</returns>
            <remarks>None</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.ContextMenuHintEventArgs.Hint">
            <summary>Specifies the help text for the currently hilighted context menu item</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.CustomContextMenuItemSelectEventArgs">
            <summary>Provides data for the CustomContextMenuItemSelect event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.CustomContextMenuItemSelectEventArgs.#ctor(LogicNP.FileViewControl.ListItem,System.Int32,System.String)">
            <summary>Initializes new instance of  CustomContextMenuItemSelectEventArgs class.</summary>
            <returns>CustomContextMenuItemSelectEventArgs</returns>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.CustomContextMenuItemSelectEventArgs.Caption">
            <summary>Gets the text caption of the menu item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.CustomContextMenuItemSelectEventArgs.CmdId">
            <summary>Gets the identifier of the menu item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.CustomContextMenuItemSelectEventArgs.Item">
            <summary>Gets the item for which the context menu item is selected.</summary>
            <remarks>This item only specifies the item on which the actual right-click occurred. However, the context menu is shown for all selected items.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.DrawItemEventArgs">
            <summary>Provides data for the  DrawItem event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.DrawItemEventArgs.GetCurrentFont">
            <summary>Gets the font currently being used to draw text.</summary>
            <returns>The font currently being used to draw text.</returns>
        </member>
        <member name="M:LogicNP.FileViewControl.DrawItemEventArgs.GetGraphics">
            <summary>Gets the graphics object for drawing the item.</summary>
            <returns>The graphics object for drawing the item.</returns>
            <remarks>Make sure that the Dispose method of the returned Graphics object is called when all drawing is done.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.DrawItemEventArgs.BackColor">
            <summary>Gets/Sets the back color of the item.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.DrawItemEventArgs.ColumnIndex">
            <summary>Gets the column (sub-item index) which is being drawn.</summary>
            <remarks>This property returns a valid value only if FileView is currently in Details view.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.DrawItemEventArgs.DrawDefault">
            <summary>Gets/Sets whether the default drawing takes place for the item.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.DrawItemEventArgs.Font">
            <summary>Gets/Sets the font that should be used to draw the item text.</summary>
            <remarks>If this property is not set, the item is drawn using the default font.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.DrawItemEventArgs.Item">
            <summary>Gets the item that is currently being drawn.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.DrawItemEventArgs.State">
            <summary>Gets the state of the item that is being drawn.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.DrawItemEventArgs.TextColor">
            <summary>Gets/Sets the text color of the item.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewCancelEventArgs">
            <summary>Provides data for various FileView events which can be cancelled.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewCancelEventArgs.#ctor(LogicNP.FileViewControl.ListItem)">
            <summary>Initializes new instance of FileViewCancelEventArgs Class class</summary>
            <remarks>None.</remarks>
            <returns>FileViewCancelEventArgs</returns>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewCancelEventArgs.Item">
            <summary>Specifies the item for which the event is taking place.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewDragDropEventArgs">
            <summary>Provides data for the FileViewDragDrop event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewDragDropEventArgs.#ctor(LogicNP.FileViewControl.FIVDataObject,System.Windows.Forms.DragDropEffects,System.Int32,System.Int32,System.Int32,LogicNP.FileViewControl.ListItem)">
            <summary>Initializes new instance of FileViewDragDropEventArgs Class</summary>
            <remarks>None.</remarks>
            <returns>FileViewDragDropEventArgs</returns>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragDropEventArgs.Data">
            <summary>Gets the data object representing the data that is being dragged.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragDropEventArgs.DoDefaultShellDropAction">
            <summary>Gets/sets whether the default shell drop action should be executed.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragDropEventArgs.Effect">
            <summary>Gets or sets the target drop effect in a drag-and-drop operation.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragDropEventArgs.Item">
            <summary>Gets the item on which the drop occurred.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragDropEventArgs.KeyState">
            <summary>Gets the state of the Shift,Control and Alt keys and the mouse buttons.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragDropEventArgs.X">
            <summary>Gets the x-coordinate of the mouse pointer where the drop occurred.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragDropEventArgs.Y">
            <summary>Gets the y-coordinate of the mouse pointer where the drop occurred.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewDragOverEventArgs">
            <summary>Provides data for the  FileViewDragOver event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewDragOverEventArgs.#ctor(LogicNP.FileViewControl.FIVDataObject,System.Windows.Forms.DragDropEffects,System.Int32,System.Int32,System.Int32,LogicNP.FileViewControl.ListItem)">
            <summary>Initializes new instance of FileViewDragOverEventArgs Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragOverEventArgs.Data">
            <summary>Gets the data object representing the data that is being dragged.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragOverEventArgs.Effects">
            <summary>Gets/sets the target drop effect in a dragdrop operation.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragOverEventArgs.Item">
            <summary>Gets the item currently under the mouse pointer.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragOverEventArgs.KeyState">
            <summary>Gets the state of the Shift,Control and Alt keys and the mouse buttons.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragOverEventArgs.X">
            <summary>Gets the x-coordinate of the mouse pointer where the drop occurred.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragOverEventArgs.Y">
            <summary>Gets the y-coordinate of the mouse pointer where the drop occurred.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewDragStartEventArgs">
            <summary>Provides data for the FileViewDragStart event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewDragStartEventArgs.#ctor(LogicNP.FileViewControl.FIVDataObject,System.Windows.Forms.DragDropEffects,System.Int32)">
            <summary>Initializes new instance of FileViewDragStartEventArgs Class</summary>
            <remarks>None.</remarks>
            <returns>FileViewDragStartEventArgs</returns>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragStartEventArgs.Cancel">
            <summary>Gets/sets whether the dragdrop operation should be cancelled.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragStartEventArgs.Data">
            <summary>Gets the data object representing the data that is being dragged.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragStartEventArgs.Effects">
            <summary>Gets/sets the allowed effects for the dragdrop operation.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewDragStartEventArgs.KeyState">
            <summary>Gets the state of the Shift,Control and Alt keys and the mouse buttons.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewEventArgs">
            <summary>Provides data for various  FileView events.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewEventArgs.#ctor(LogicNP.FileViewControl.ListItem)">
            <summary>Initializes new instance of FileViewEventArgs Class</summary>
            <remarks>None.</remarks>
            <returns>FileViewEventArgs</returns>
        </member>
        <member name="F:LogicNP.FileViewControl.FileViewEventArgs.Item">
            <summary>Specifies the item for which the event is taking place.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewWPF">
            <summary>LogicNP Software FileView.WPF Control.</summary>
            <remarks>    The FileView Control allows you to add a     Windows-Explorer-like listview to your application, showing all     the files and folders of the Shell's Namespace exactly as     Windows Explorer does. It mimics all aspects of the filelist     used by Windows Explorer, right from displaytexts, icons and     overlayicons to contextmenus, dragdrop, AutoUpdate, infotips,     renaming, virtual folders and much more.     The FileView Control gives powerful functionality to     browse the Shell's Namespace.                                                             Features                 Complete Windows                 Explorer look, feel and behavior                                         2-line integration with FolderView and ShComboBox         brings complete Windows Explorer functionality to your         application.         Identical displaynames, icons and overlay icons shown         for files/folders.         Identical dragdrop functionality.         Identical renaming functionality.         Identical display of infotips for         files/folder.         Identical display of contextmenus ( including 'Send         To' and any other submenus) for files/folders.         Identical support for various display modes( Large         Icon, Small Icon,etc.) including full support for 'Details         Mode'.         Identical default-key handling functionality ( e.g.         Alt-Enter shows the properties dialog box)         Identical background context menu functionality when         the empty background area is right-clicked.         Powerful AutoUpdate functionality refreshes FileView         automatically when files/folders are renamed, deleted or         created.          Advanced behavior control              Prevent display of contextmenus for all files/folders         using a simple property or on a per-file/folder basis using         an event.         Prevent dragdrop for all files/folders using a simple         property or on a per-file/folder basis using an         event.         Allow/disallow renaming for all files/folders using a         simple property or on a per-file/folder basis using an         event.         Allow/disallow selection for all files/folders using         a simple property or on a per-file/folder basis using an         event.         Change default drag actions during dragdrop ( e.g.         from Copy To Move )         Control whether folders can be viewed or files         executed for all files/folders using simple properties or         on a per-file/folder basis using events.         Control checking/unchecking on a per-file/folder         basis.         Prevent execution of default shell commands ( e.g.         Open, Cut, Properties, etc. in response to keystrokes or         through the context menu) for all files/folders using a         property or on a per-file/folder basis using an         event.         Show/hide hidden files/folders using a simple         property.         Show/hide virtual files/folders ( e.g. Control Panel         ) using a simple property.          Simple but powerful programming     model              Enumerate all files/folders shown in FileView.         Execute shell commands ( e.g. Cut, Delete, etc ) on         files/folders.         Programmatically navigate the folder         hierarchy.         Programmatically open files with their associated         applications.         Access complete information of a file/folder         including its displayname, fullpath, checkstate, selection         state and attributes like whether it is a shortcut, shared,         hidden, readonly, file and folder.         Associate developer defined data with each         file/folder.     </remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.AddCustomColumn(System.String,LogicNP.FileViewControl.ColumnTextJustificationStyles,System.Int32)">
            <summary>Adds user-defined columns to FileView.</summary>
            <returns>The index of the newly added column</returns>
            <remarks>Use this method to add user-defined columns in FileView. You can set the column text for individual items by using the  SetColumnText of ListItem in the  AfterItemAdd event or anytime after that.</remarks>
            <param name="name">The name of the column as will be displayed in the column-header.</param>
            <param name="justification">The text justification to be used for the column.</param>
            <param name="width">The width of the column in pixels.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.AddCustomIcon">
            <summary>Adds a custom icon to the specified imagelist.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.AddCustomIcon(System.Drawing.Icon,LogicNP.FileViewControl.FileViewImageLists)">
            <summary>Adds a custom icon to the specified imagelist.</summary>
            <returns>The index of the newly added icon in the specified imagelist.</returns>
            <remarks>    The return value of this function can be used with the          IconIndex property of          ListItem to display the newly added icon for that     ListItem.     Thumbnail imagelists are cleared every time the current     folder is changed. Therefore, when using thumbnail view, custom     icons, if any, should be added every time the current folder     changes. You can use the CurrentFolderChanged event for doing     this. For all other views, the icon needs to be added only once     and the          Initialize event is a good place to do this.</remarks>
            <param name="icon">The icon to be added.</param>
            <param name="imageList">The imagelist to which the icon is to be added. FileView has three imagelists : a large imagelist which is used in Icon view; a small imagelist, which is used in Small,List and Details view; and a thumbnail imagelist, which is used in Thumbnail view. An icon added to an imagelist used by one view cannot be used with an imagelist used by another view.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.AddCustomIcon(System.Drawing.Bitmap,LogicNP.FileViewControl.FileViewImageLists)">
            <summary>Adds a custom bitmap to the specified imagelist.</summary>
            <returns>The index of the newly added bitmap in the specified imagelist</returns>
            <remarks>    The return value of this function should be used with the          IconIndex property of          ListItem to display the currently added bitmap for that     ListItem.     Thumbnail imagelists are cleared every time the current     folder is changed. Therefore, when using thumbnail view, custom     bitmaps, if any, should be added every time the current folder     changes. You can use the CurrentFolderChanged event for doing     this. For all other views, the bitmap needs to be added only     once and the          Initialize event is a good place to do this.</remarks>
            <param name="bitmap">The bitmap to be added</param>
            <param name="imageList">The imagelist to which the bitmap is to be added. FileView has three imagelists : a large imagelist which is used in Icon view; a small imagelist, which is used in Small,List and Details view; and a thumbnail imagelist, which is used in Thumbnail view. A bitmap added to an imagelist used by one view cannot be used with an imagelist used by another view.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.AddCustomItem(System.String,System.Int32)">
            <summary>Adds a custom item to FileView.</summary>
            <returns>The newly added item.</returns>
            <remarks>    This method adds custom items to     FileView, i.e. items which do not belong to     the shell (normal files and folders).     Custom items added in the          BeforeFill event are added before all other items. Custom     items added in the          AfterFill or other events are added after all other items.     This behavior can be changed by specifying a different sort     method in the          BeforeColumnSort event.     Custom items can use the UserData property to store data     on a per-item basis. Events like ItemClick or ItemDblClick are     called as for normal items.</remarks>
            <param name="displayName">The displayname for the item</param>
            <param name="iconIndex">The index of the icon in the system imagelist that will be displayed for the item.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.BeginUpdate">
            <summary>Prevents the control from drawing until the  EndUpdate method is called.</summary>
            <remarks>This method can be used when many changes are about to be made to FileView or when a large number of items are about to be added or deleted to FileView. Calling this method prevents FileView from drawing itself every time a change is made and can speed up operations in some cases. FileView is not redrawn until the  EndUpdate method is called.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.CheckItems(LogicNP.FileViewControl.CheckTypes)">
            <summary>Checks, unchecks or inverts the check-state of all items in FileView.</summary>
            <returns>None.</returns>
            <remarks>Use this method to check/uncheck all items in FileView at once instead of iterating over the items and individually changing the check state of each item.</remarks>
            <param name="checkType">Specifies whether the items should be checked or unchecked.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.CreateNewFile(System.String,System.Boolean)">
            <summary>Creates a automatically named new file having the specified extension</summary>
            <remarks>    This function creates a new file of the specified     extension and having a default name. This method gives     functionality similar to that when the user right-clicks on the     background of a folder and selects from the 'New' menu. This     method executes successfully only if the currently browsed     folder belongs to the filesystem; for example, this method will     fail if you execute this method when browsing the contents of     'Control Panel'. The return value indicates whether the method     was successful.     When creating the new file, FileView uses the system     description of the specified extension. For example, if the     extension is ".bmp", FileView tries to create a file named "New     Bitmap File.bmp". If a file with this name already exists, then     FileView tries to create a new file with the name 'New Bitmap     File (1).bmp'; if it also exists, it tries 'New Bitmap File     (2).bmp' and so on. FileView goes on until it has made 50     tries.     A name for the new file can be specified instead of     letting the new file have a default name. If the extension     parameter does not start with a '.', then FileView does not     perform any of the above steps. Instead it tries to create a     new file with the specified name.     If the EditNow parameter is True, then the newly created     file immediately enters renaming mode, so that the user can     give a new name to the file.</remarks>
            <returns>True if a new file was successfully created, False otherwise.</returns>
            <param name="extension">Specifies the extension of the new file. The extension must start with a '.'</param>
            <param name="editNow">Specifies whether the newly created file immediately enters renaming mode.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.CreateNewFolder(System.Boolean)">
            <summary>Creates a new folder in the current folder.</summary>
            <returns>True if the method was successful, False otherwise</returns>
            <remarks>    Use this method to create a new folder in the currently     browsed folder. This method executes successfully only if the     currently browsed folder belongs to the filesystem; for     example, this method will fail if you execute this method when     browsing the contents of 'Control Panel'.     Initially, FileView tries to create a     new folder with the name 'New Folder'. If a folder with this     name already exists, then FileView tries to create a new folder     with the name 'New Folder (1)'; if it also exists, it tries     'New Folder (2)' and so on. FileView goes on until it has made     50 tries.     If the EditNow parameter is     true, then the newly created folder     immediately enters renaming mode, so that the user can give a     new name to the folder.</remarks>
            <param name="editNow">Specifies whether the newly created folder immediately enters renaming mode.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.CreateNewFolderFromName(System.String)">
            <summary>Creates a new folder in the current folder with the specified name.</summary>
            <returns>True if the method was successful, False otherwise</returns>
            <remarks>Use this method to create a new folder in the current folder. This method executes successfully only if the current folder belongs to the filesystem; for example, this method will fail if you execute this method when browsing the contents of 'Control Panel'.</remarks>
            <param name="folderName">The name for the new folder.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.DeleteCustomColumn(System.String)">
            <summary>Deletes the specified user-defined column from FileView.</summary>
            <returns>Not used.</returns>
            <remarks>The Name parameter specifies the name of the column as it is displayed in the column header. If the Name parameter is an empty string (""), then all user-defined columns are deleted.</remarks>
            <param name="name">The name of the column to delete.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.DisplayBackgroundMenu(System.Drawing.Point)">
            <summary>Displays the background menu for the current folder.</summary>
            <returns>None.</returns>
            <remarks>Use this method to programmatically display the FileView background menu.</remarks>
            <param name="pt">Specifies the point in client coordinates where the background menu should be displayed.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.DisplayShellMenuForItems(LogicNP.FileViewControl.ListItem[],System.Drawing.Point)">
            <summary>Displays the shell context menu for the specified items.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="items">The items for which the shell context menu should be displayed. If this array is null or empty, then the shell menu for the currently selected items is displayed.</param>
            <param name="pt">The point in client coordinates where the shell context menu should be displayed.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.EndUpdate(System.Boolean)">
            <summary>Resumes drawing of FileView after drawing is suspended by the  BeginUpdate method.</summary>
            <remarks>    This method must always be called after the          BeginUpdate method is called.     The          BeginUpdate method is used when many changes are about to     be made to FileView or when a large number of items are about     to be added to FileView. Calling the          BeginUpdate method prevents FileView from drawing itself     every time a change is made and can speed up operations in some     cases. FileView is not redrawn until the     EndUpdate method is called.</remarks>
            <param name="invalidate">Specifies whether FileView is immediately redrawn. Usually set to True.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.ExecuteCmdForAllSelected(LogicNP.FileViewControl.ShellCommands)">
            <summary>Executes the specified shell command on all selected items.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="cmd">The command to execute.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.ExecuteCmdForFolder(LogicNP.FileViewControl.ShellCommands)">
            <summary>Executes a shell command on the current folder.</summary>
            <returns>None.</returns>
            <remarks>    This method executes a shell command on the folder which     FileView is currently browsing.     Some shell commands such as the 'rename' command will not     work with this method.</remarks>
            <param name="cmd">The command to execute.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetAllItemsCheckState">
            <summary>Gets the combined check state of all items currently in FileView.</summary>
            <returns>An  AllItemsCheckState value which specifies the combined check state of all items currently in FileView.</returns>
            <remarks>See the documentation of the  AllItemsCheckState enumeration for the meaning of what the return values of this method mean.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetColumndIDFromColumn(System.String,System.Int32,System.Guid@,System.Int32@)">
            <summary>Gets the unique identifier for the specified column.</summary>
            <returns>True, if the method is successful, False otherwise.</returns>
            <remarks>    Each column is uniquely identified by a GUID-number pair.     This methods retrieves this information about the specified     column via the guid and pid parameters. The GUID-number pair     enables the column to be uniquely identified irrespective of     its column name (such as "Name", "Size", "Type") which varies     according to the locale.     This method is typically called in the          BeforeColumnAdd event handler to retrieve the unique     identifier for the column being added. In this case, the     columnName parameter should be an empty string and the     columnIndex parameter should be -1.     The following are ColumnGUID -ColumnNumericID pairs for     common columns :     Name :     {B725F130-47EF-101A-A5F1-02608C9EEBAC}-10     Size :     {B725F130-47EF-101A-A5F1-02608C9EEBAC}-12     Type :     {B725F130-47EF-101A-A5F1-02608C9EEBAC}-4     Date Modified :     {B725F130-47EF-101A-A5F1-02608C9EEBAC}-14     Other ColumnGUID -ColumnNumericID pairs can be found in     the "propkey.h" include file in the Platform SDK.</remarks>
            <param name="columnName">             The name of the column.     </param>
            <param name="columnIndex">             The 0-based index of the column.     </param>
            <param name="guid">The GUID identifier for the specified column.</param>
            <param name="pid">The numeric identifier for the specified column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetColumnDisplayIndex(System.String,System.Int32)">
            <summary>Gets the index at which the column with the specified name is displayed.</summary>
            <returns>The 0-based index at which the column with the specified name is displayed.</returns>
            <remarks>    This method returns the display index of a column ; that     is, the physical position of the column from left to     right.     The display index (the physical position) of the column     is different than its actual index (the index relative to other     columns).</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The 0-based index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetColumnName(System.String,System.Int32)">
            <summary>Gets the name of a column.</summary>
            <returns>    The name of a column.     If the current          ViewStyle is not set to Details mode, or if the column with     the specified name or index does not exist, this method returns     empty string.</returns>
            <remarks>None.</remarks>
            <param name="columnName">The name of the column. This parameter is ignored.</param>
            <param name="columnIndex">The 0-based index of the column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetColumnTextJustification(System.String,System.Int32)">
            <summary>Gets the text justification of the specified column.</summary>
            <returns>    A ColumnTextJustificationStyles value which specified the text     justification of the specified column.      If the current          ViewStyle is not set to Details mode, or if the column with     the specified name or index does not exist, this method returns     -1.</returns>
            <remarks>None.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetColumnWidth(System.String,System.Int32)">
            <summary>Gets the width of a column.</summary>
            <returns>    The width of a column in pixels.     If the current          ViewStyle is not set to Details mode, or if the column with     the specified name or index does not exist, this method returns     -1</returns>
            <remarks>None.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The 0-based index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetImageListIcon(System.Int32)">
            <summary>Gets the icon present at the specified index in the imagelist currently used by FileView.</summary>
            <returns>The icon present at the specified index in the imagelist currently used by FileView.</returns>
            <remarks>    FileView has three imagelists : a large imagelist which     is used in Icon view; a small imagelist, which is used in     Small, List and Details view; and a thumbnail imagelist, which     is used in Thumbnail view. This method returns the small icon,     large icon or thumbnail depending on the current view of     FileView.</remarks>
            <param name="index">The index within the current imagelist.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetImageListIconSize(LogicNP.FileViewControl.FileViewImageLists)">
            <summary>Gets the size in pixels of each icon in the specified imagelist.</summary>
            <returns>The size in pixels of each icon in the specified imagelist.</returns>
            <param name="imageList">The imagelist whose icon size is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetItemFromName">
            <summary>Returns the item with the specified displayname.</summary>
            <returns>The item with the specified displayname or null if it could not be found.</returns>
            <remarks>Use this method to search for a ListItem having the specified displayname. You should specify the exact displayname (comparison is case-sensitive) by which the item is displayed in FileView. If the ListItem with the given name does not exist, a null value is returned.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetListItem(System.Int32)">
            <summary>Returns the item at the specified index.</summary>
            <returns>The item at the specified index.</returns>
            <remarks>You can use this method to retrieve a ListItem shown in FileView by its index. The index is 1-based. When the index specified is less than or equal to zero or is greater than the number of items in FileView a null value is returned.</remarks>
            <param name="index">The 1-based index of the item.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetSortColumnIndex">
            <summary>Gets the index of the column by which items in FileView are sorted.</summary>
            <returns>Gets the index of the column by which items in FileView are sorted.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GetSortOrder">
            <summary>Gets whether items in FileView are sorted in ascending or descending order.</summary>
            <returns>A  SortOrders value that indicates whether items in FileView are sorted in ascending or descending order.</returns>
            <remarks>See SortOrders for more information.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.GoUp">
            <summary>Browses the contents of the parent folder of the current folder.</summary>
            <remarks>This method is used to travel up the folder hierarchy.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.HitTest(LogicNP.FileViewControl.HitTestInformation@,System.Int32,System.Int32)">
            <summary>Returns the item under the specified location.</summary>
            <returns>The item under the specified location; or null if no item lies under the specified location.</returns>
            <remarks>The coordinates start from (0,0) at the top-left of the control and grow towards the bottom-right.</remarks>
            <param name="htInfo">Specifies which part of the item (icon,label,etc) lies under the specified location.</param>
            <param name="x">The x-coordinate, in pixels, of the point to hittest.</param>
            <param name="y">The y-coordinate, in pixels, of the point to hittest.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.RefreshView">
            <summary>Causes FileView to reload items in the current folder.</summary>
            <returns>None.</returns>
            <remarks>This method causes FileView to refresh its contents by reloading all the items in the currently browsed folder. You can use this method, if the AutoUpdate property is false and a change has occurred in the shell's namespace as a result of some operation, say drag-drop.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.RefreshViewFast">
            <summary>Causes FileView to refresh the items in the currently browsed folder.</summary>
            <remarks>This method is a faster version of the RefreshView method. Instead of reloaded all items in FileView, this method deletes those items from FileView which are no longer present and adds those items which are newly created.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.ResetToDesktop">
            <summary>Causes FileView to display the contents of the Desktop folder.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.ResetToStartingFolder">
            <summary>Resets FileView to browse the starting folder set at design-time.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SelectCurrentFolder">
            <summary>Allows the user to select a folder which FileView will browse.</summary>
            <remarks>This method allows you to visually select a folder which FileView will browse. The folder is selected through a 'Browse For Folder' dialog box.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SelectItems(LogicNP.FileViewControl.SelectTypes)">
            <summary>Selects, de-selects or inverts the selection of all items in FileView.</summary>
            <param name="selectType">Specifies how the items are to be (de)selected.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetBackgroundImage(System.String,System.Boolean)">
            <summary>Sets the image to be displayed in FileView's background.</summary>
            <returns>True if the method was successful, False otherwise.</returns>
            <remarks>None.</remarks>
            <param name="bitmapPath">The path of the bitmap file. The image can be in BMP, GIF or JPEG format.</param>
            <param name="tile">True if the bitmap should be displayed tiled; False otherwise</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetCheckBoxBitmaps(System.Drawing.Bitmap,System.Int32,System.Drawing.Color)">
            <summary>Specifies custom bitmaps to be used as check/uncheck images.</summary>
            <returns>None.</returns>
            <param name="checkBoxStrip">The bitmap strip containing the check images. It must consist of 4 images laid side by side, each of width specified by the checkBoxWidth parameter. The first image is used for an unchecked item, the second image is used for a checked item, the third image is used for an item which is unchecked but whose children might be checked, the fourth image is used for an item which is checked but not all of its children are checked.</param>
            <param name="checkBoxWidth">The width of each image in the strip.</param>
            <param name="transparentColor">The color in the bitmap which should be treated as the transparent color.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetColumnDisplayIndex(System.String,System.Int32,System.Int32)">
            <summary>Sets the display position of the specified column.</summary>
            <returns>True if the method was successful; False otherwise.</returns>
            <remarks>    Use this method to change the visual display order of     columns. The display index (the physical position) of the     column is different than its actual index (the index relative     to other columns). If the current          ViewStyle is not set to Details mode, or if the column with     the specified name or index does not exist, this method     fails.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
            <param name="displayIndex">The display index of the column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetColumnName(System.String,System.Int32,System.String)">
            <summary>Sets the name of the specified column.</summary>
            <returns>None.</returns>
            <remarks>    If the current          ViewStyle is not set to Details mode, or if the column with     the specified name or index does not exist, this method     fails.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The 0-based index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
            <param name="newName">The new name of the column</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetColumnTextJustification(System.String,System.Int32,LogicNP.FileViewControl.ColumnTextJustificationStyles)">
            <summary>Sets the text justification style of the specified column.</summary>
            <returns>None.</returns>
            <remarks>    If the current          ViewStyle is not set to Details mode, or if the column with     the specified name or index does not exist, this method     fails.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
            <param name="justification">The justification style of the column</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetColumnWidth(System.String,System.Int32,System.Int32)">
            <summary>Sets the width of a column in details mode.Sets the width of the specified column.</summary>
            <returns>None.</returns>
            <remarks>If the current  ViewStyle is not set to Details mode, or if the column with the specified name or index does not exist, this method fails.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
            <param name="width">The width in pixels of the specified column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetIconSpacing(System.Drawing.Size)">
            <summary>Sets the spacing between items in icon and thumbnail mode</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="spacing">The spacing between items</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetOverlayIcon(System.Int32,LogicNP.FileViewControl.FileViewImageLists)">
            <summary>Sets the icon at the specified index in the specified imagelist as an overlay icon</summary>
            <returns>The index of the newly set overlay icon.</returns>
            <remarks>Use this method to set a particular icon as an overlay icon in the specified imagelist. This method returns the index of the newly set overlayicon. You should store and use this index with the OverlayIconIndex property of the ListItem object to specify custom overlay icons for items.</remarks>
            <param name="iconIndex">The index of the icon which should be set as an overlay icon.</param>
            <param name="imageList">The imagelist in which to set the overlay icon. FileView has three imagelists : a large imagelist which is used in Icon view; a small imagelist, which is used in Small,List and Details view; and a thumbnail imagelist, which is used in Thumbnail view. An icon added to an imagelist used by one view cannot be used with an imagelist used by another view.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SetToSpecialFolder(LogicNP.FileViewControl.SpecialFolders)">
            <summary>Causes FileView to browse the contents of one of the special folders defined by Windows</summary>
            <remarks>Special folders are folders defined by Windows such as the 'Control Panel' and 'My Computer' folders. See the  SpecialFolders enumeration for a list of all special folders.</remarks>
            <returns>None.</returns>
            <param name="folder">The special folder which FileView should browse.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FileViewWPF.SortByColumn(System.String,System.Int32,LogicNP.FileViewControl.SortOrders)">
            <summary>Sorts items by the specified column.</summary>
            <returns>If the current ViewStyle is not set to Details mode, or if the column with the specified name or index does not exist, this method returns false, otherwise it returns true.</returns>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
            <param name="sortOrder">The type of sorting to perform.</param>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowColumnHeaderDragdrop">
            <summary>Gets/Sets whether column header dragdrop reordering is allowed in details view.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowDiveIntoFolders">
            <summary>Gets/Sets whether double-clicking on a folder shows the contents of that folder</summary>
            <remarks>You can set this property to false to prevent the user from browsing into folders by double-clicking on them or pressing the 'Enter' key. This property is only in effect when the user double-clicks on a folder or presses the 'Enter' key. You can still change the currently browsed folder programmatically; for example by using the CurrentFolder property.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowDragDrop">
            <summary>Gets/Sets whether drag-drop operations are allowed.</summary>
            <remarks>Set this property to true to allow drag and drop operations in FileView like they occur in Windows Explorer. Drag and drop operations can occur within one FileView Control, between two or more FileView Controls, between FileView and Windows Explorer, between FileView and FolderView and between FileView and any application which supports drag and drop of files. Setting this property to false disallows any kind of drag and drop operations. Use the  DragDropSetting property for more control over the kind of drag-drop operations that are allowed. For even more control, the  FileViewDragOver,  FileViewDragStart and  FileViewDragDrop events can be handled.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowDragDropItemOrdering">
            <summary>Gets/Sets whether items can be reordered by drag-dropping.</summary>
            <remarks>    Use the          PositionalItems property to enumerate items in their     physical positional order.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowFileExecution">
            <summary>Gets/Sets whether double-clicking on a file opens it.</summary>
            <remarks>    If this property is set to true,     double-clicking on a file opens that file with its associated     program.     You can set this property to false to     prevent the user from opening/execution files by     double-clicking on them or by pressing the 'Enter' key. You can     still open the file programmatically; for example by using the     ExecuteShellCommand method of ListItem.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowItemRenaming">
            <summary>Gets/Sets whether items can be renamed.</summary>
            <remarks>    You can set this property to false to     prevent the renaming of items shown in FileView. This     restriction only applies through the user-interface, i.e. when     the user presses the F2 key or he selects the Rename command     from the contextmenu. You can still rename the item     programmatically; for example by using the ExecuteShellCommand     method of ListItem.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowMultipleSelection">
            <summary>Gets/Sets whether more than one item can be selected.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AllowZipFolders">
            <summary>Gets/Sets whether zip files are allowed to behave as folders on Windows XP</summary>
            <remarks>    This property takes effect only on Windows XP and if     Compressed Folders shell integration     functionality is turned on.     If this property is set to True, then,     similar to Windows Explorer, zip files are treated as folders,     double-clicking on them navigates into them to display their     contents. If this property is set to False,     then, irrespective of whether the Compressed     Folders shell integration functionality is turned on     in Windows XP, zip files are treated as normal files.     Double-clicking on them opens the file with the default program     associated with zip files.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AutoSort">
            <summary>Gets/Sets whether items in FileView are automatically sorted.</summary>
            <remarks>If this property is set to False, then items in FileView are not automatically sorted whenever a new folder is browsed or a new item is added to FileView. In this case, the items can be manually sorted using the  SortByColumn method of FileView.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.AutoUpdate">
            <summary>Gets/Sets whether changes made to the shell's namespace are automatically reflected in FileView</summary>
            <remarks>    Setting this property to true causes     FileView to update itself when changes occur; i.e. when a file     or folder is created, renamed, moved and copied.     Some operations, like drag-drop or renaming, which cause     changes in the shell's namespace will not be reflected properly     in FileView, if AutoUpdate is set to     false.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.BackColor">
            <summary>Gets/Sets the background color of FileView.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.BorderStyle">
            <summary>Gets/Sets the borderstyle for FileView Control</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.CheckedItems">
            <summary>Gets the enumeration of all currently checked items in FileView.</summary>
            <remarks>You can use the this property with the foreach ( For Each in Visual Basic) statement to enumerate over all the currently checked items in FileView.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ColumnCount">
            <summary>Gets the number of columns in FileView</summary>
            <remarks>This property returns 0 if the  ViewStyle property is not set to Details mode.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ColumnHeadersClickable">
            <summary>Gets/Sets whether column headers act as buttons and are clickable.</summary>
            <remarks>If this property is True, then column headers can be clicked and the items in FileView can be sorted by the clicked column. If this property is False, column headers appear flat and cannot be clicked.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.CurrentFolder">
            <summary>Gets/Sets the full path of the folder which FileView is currently displaying</summary>
            <remarks>    You can set this property to a valid path to cause     FileView to browse that path. The path must     specify a folder. If the path specifies a file, then this     property assignment fails.     You can read this property to retrieve the full path of     the folder which FileView is currently     browsing. If FileView is currently browsing a     virtual folder such as the 'Control Panel', this property     returns an empty string. The          CurrentPIDL property can be used in this case to retrieve     the fully qualified PIDL of the current folder.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.CurrentFolderDisplayName">
            <summary>Gets the displayname of the current folder.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.CurrentPIDL">
            <summary>Specifies the fully qualified PIDL of the folder which FileView is currently browsing.</summary>
            <remarks>    This property returns the fully qualified PIDL ( pointer     to item identifier list ) of the folder which     FileView is currently browsing. You should not     free the pointer that is returned. If you want to use the     return value, first make a copy of the PIDL using the          PIDLCopy method.     You can set this property to a new PIDL to cause     FileView to browse the contents of the folder     specified by that PIDL. FileView internally     makes a copy of the PIDL, so you can continue to use the PIDL     for your own purpose. The PIDL can denote both filesystem and     virtual folders.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.DefaultKeyHandling">
            <summary>Gets/Sets whether standard keystrokes like Ctrl-X,Ctrl-C,etc are handled by FileView like Windows Explorer</summary>
            <remarks>    If this property is set to true, FileView responds to     standard keystrokes as Windows Explorer does. For example if     the user presses the Ctrl-C keystroke, FileView copies all the     currently selected items.     Currently the following keystrokes are recognized:     Space : Checks\Unchecks the selected     item     Enter : Opens all the currently selected     items     Ctrl-X : Cuts all the currently selected     items     Ctrl-C : Copies all the currently     selected items     Ctrl-V : Pastes all the currently     selected items     Delete : Deletes all the currently     selected items     Backspace : Goes up one level.     F2 : Starts a rename operation on the     selected item     F5 : Refreshes the currently browsed     folder     Alt-Enter : Displays the properties of     all the currently selected items     Windows ContextMenu key : Displays the     context menu for all the currently selected items.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.DragDropSetting">
            <summary>Gets/Sets the types of drag-drop operations that are allowed.</summary>
            <remarks>This property allows more control over the kind of drag-drop operations that are allowed. For even more control, handle the  FileViewDragOver,  FileViewDragStart and  FileViewDragDrop events.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.DrawMode">
            <summary>Gets/Sets how items in FileView are drawn.</summary>
            <remarks>If this property is set to  FileViewDrawMode.OwnerDraw, the  DrawItem event is raised every time an item needs to be drawn. This event can be handled to perform custom drawing of items.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.EnableColumnIcons">
            <summary>Gets/Sets whether icons are shown for sub-items (columns).</summary>
            <remarks>When this property is set to True, icons can also be displayed for sub-items, that is, for columns of each item. The  SetColumnIconIndex method is used to set the icon and the  GetColumnIconIndex method is used to get the icon currently being displayed.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.EnableGroupView">
            <summary>Gets/Sets whether Group View is enabled.</summary>
            <remarks>This property only takes effect on Windows XP and if the host application is configured to use the Common Controls v6.0 library. When set to True, items are grouped similar to Windows Explorer. The grouping can be done by Name, Size, Type, Date Modified or any other column available. The grouping can be changed by the user by invoking the background menu and selected one of the menu items under the Arrange Icons submenu.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.EnableVistaTheme">
            <summary>Gets/Sets whether Vista-style look is enabled when running on Vista or higher.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.FilePattern">
            <summary>Gets/Sets the current pattern used for filtering files.</summary>
            <remarks>    This property specifies the types of files that are shown     in the FileView.     The default value of this property " *.* " shows all     types of files. You can set this property to a different value     to allow only files with certain extensions. For example, to     show only bitmap files, you can set the value to " *.bmp     ".     You can also set multiple patterns separated by a     semicolon. For example, to show only picture files of all types     you can set this value to " *.bmp;*.jpg;*.gif;*.png "     The pattern can also be any valid wildcard expression.     For example the pattern " a*.bmp " will show only bitmap files     beginning with the letter 'a'.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.FirstSelectedItem">
            <summary>Gets the first selected item in FileView.</summary>
            <remarks>    This property is obsolete. Instead, use the          SelectedItems property to enumerate the list of all     selected items.     This property returns the first selected     ListItem in FileView. Use     this property in conjunction with the NextSelectedItem property     to enumerate all the selected items in     FileView. If no item is selected, then a     null value is returned.     You should always use this property once before using the     NextSelectedItem property, otherwise the NextSelectedItem     property returns invalid values.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.FlatScrollBar">
            <summary>Gets/Sets whether scroll bars are drawn using a flat style</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.FocusedItem">
            <summary>Gets the focused item in FileView.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ForeColor">
            <summary>Gets/Sets the item text color.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.FullRowSelect">
            <summary>Gets/Sets whether an item can be selected by clicking on any position along its row in details view.</summary>
            <remarks>Normally an item shown in FileView can only be selected by clicking on its icon or text. When this property is set to true, an item can be selected by clicking at any position along the items row.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.HeaderSortArrowImageStyle">
            <summary>Gets/Sets whether the sort arrow image is shown in column headers in report view.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.HideColumnHeaders">
            <summary>Gets/sets whether column headers are hidden in details view.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.HideSelection">
            <summary>Gets/Sets whether the selected items remains highlighted even when FileView has lost the focus.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.HotTracking">
            <summary>Gets/Sets whether the text of an item under the mouse pointer is underlined.</summary>
            <remarks>    If this property is set to True, then an item in FileView     is displayed with underlined text when the mouse pointer moves     over it. In addition, the          TrackSelect functionality is enabled, the          ItemUnderliningStyle functionality is set to          UnderlineHotItems, and the          ItemActivationStyle functionality is set to          OneClickActivation. Note that the above properties     are not actually set to these respective     values.     When the HotTracking property is set to False, all the     above functionality reverts according to the existing values of     the TrackSelect, ItemUnderliningStyle and the     ItemActivationStyle properties.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.IconArrangement">
            <summary>Gets/Sets how items in FileView are arranged.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ItemActivationStyle">
            <summary>Gets/sets how the items in FileView are activated.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ItemCount">
            <summary>Returns the number of items in FileView.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.Items">
            <summary>Gets the enumeration of all items currently present in FileView.</summary>
            <remarks>You can use this property with the foreach ( For Each in Visual Basic) statement to enumerate over all the items currently present in FileView.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ItemUnderliningStyle">
            <summary>Gets/sets how items in FileView are underlined.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.NextSelectedItem">
            <summary>Gets the next selected item in FileView</summary>
            <remarks>    This property is obsolete. Instead, use the          SelectedItems property to enumerate the list of all     selected items.     Use this property along with FirstSelectedItem to     enumerate through all the ListItems which are     currently selected. This property returns     ListItems in the order that they appear in     FileView, not in the order in which they are     selected. When no more selected ListItems are     available, a NULL value is returned.     Always use the FirstSelectedItem property before using     this property for correct return values.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.PositionalItems">
            <summary>Gets the enumeration of all items in FileView in the order that they are positioned in FileView.</summary>
            <remarks>In Icon mode, items in FileView can be re-ordered via drag-drop so that the index-order of items (used with the  Items property) is different from the physical positional order. This property can be used to enumerate all items in the order that they are positioned.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.SelectedCount">
            <summary>Returns the number of selected items in FileView.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.SelectedItemHasBorder">
            <summary>Gets/sets whether selected items in FileView are drawn with borders.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.SelectedItems">
            <summary>Gets the enumeration of all currently selected items in FileView.</summary>
            <remarks>You can use this property with the foreach (For Each in Visual Basic) statement to enumerate over all the currently selected items in FileView.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowBackgroundMenu">
            <summary>Gets/Sets whether the background menu is shown when the user right-clicks on the background.</summary>
            <remarks>If this property is set to true, then the background menu (containing menuitems such as 'New Folder', 'Refresh', 'Arrange Icons', etc..) is shown when the user right-clicks on the blank area in FileView. This is the same menu that is shown by Windows Explorer.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowCheckBoxes">
            <summary>Gets/Sets whether check boxes are shown next to each item.</summary>
            <remarks>    If this property is set to true, then a     check box is shown next to each item. The user can check or     uncheck items using these check boxes. You can retrieve the     check status of an item by using the Checked property of     ListItem.     You can show or hide check boxes for individual ListItems     by using the ShowCheckBox property of     ListItem</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowContextMenus">
            <summary>Gets/Sets whether shell contextmenus are show when the user right-clicks on items.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowFolders">
            <summary>Gets/Sets whether folders are shown by FileView.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowGridLines">
            <summary>Gets/Sets whether gridlines are shown in details view.</summary>
            <remarks>This property only takes effect if the ViewStyle property is set to Details.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowHiddenItems">
            <summary>Gets/Sets whether hidden items are shown by FileView.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowInfoTips">
            <summary>Gets/Sets whether an infotip is shown for an item when the mouse is over it.</summary>
            <remarks>When this value is set to true, then hovering the mouse pointer on an item for a certain amount of time displays the infotip associated with the item exactly as displayed by Windows Explorer.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowSortColumnShaded">
            <summary>Gets/Sets whether the sorted column is shown shaded.</summary>
            <remarks>This property takes effect only if visual styles are enabled for the host application.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowSpecialFolders">
            <summary>Gets/Sets whether special(virtual) folders like the 'Control Panel' are shown in FileView.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ShowUIDialogs">
            <summary>Gets/Sets whether system UI dialogs displaying informational or error messages are shown.</summary>
            <remarks>You should set this property to False to prevent user-interface dialogs displaying informational or error messages from being showing to the user. Such dialogs or messages can be displayed when shell commands are executed on items through the keyboard or the contextmenu or non-accessible folders are browsed.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.StringResources">
            <summary>Gets the collection of string resources currently used by FileView.</summary>
            <remarks>The string manager accessed by this property is a collection of strings in a particular language. You can use the  SetCulture method of  StringResourceManager to load strings in that language. Example of localizable strings used by FileView is the menu captions of all menu items in the background context menu of FileView.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ThumbnailSize">
            <summary>Gets/Sets the size of thumbnails in Thumbnail view.</summary>
            <remarks>    If you set this value to (-1,-1), then the thumbnails are     set to the system-specified size (or the default size of 96x96     if no size is specified)</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.TrackSelect">
            <summary>Gets/Sets whether an item can be selected by hovering the mouse over it.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.Utilities">
            <summary>Gets a reference to Utility class consisting of helper methods.</summary>
            <remarks>The  Utilities class accessed by this property contains a number of helper methods which can used when working with FileView.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.FileViewWPF.ViewStyle">
            <summary>Gets/Sets the current viewstyle (icon,list,report or smallIcon) of FileView</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.AfterFill">
            <summary>Occurs after FileView fills itself with items from a new folder.</summary>
            <remarks>You can use this event to do any work that you might need to perform after a new folder is displayed in FileView. Another use of this event is to add custom items using the AddCustomItem method. Custom items added in this event are added after any other items are added.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.AfterItemAdd">
            <summary>Occurs after an item is added to FileView.</summary>
            <remarks>Use this event to change the properties of the ListItem like its text or its icon. You can also assign any data you would like to associate with the ListItem using the UserData property.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.AfterLabelEdit">
            <summary>Occurs after an item is renamed.</summary>
            <remarks>    This event occurs after the user has finished editing the     item label and specified a new name for the item. You can use     this event to selectively allow or disallow renaming of items.     This event can also be used to modify the new label that the     user has given to the item. This can be used to add missing     extensions, rename files/folders according to certain rules,     etc.     This event is fired only if the AllowItemRenaming     property is set to True</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.AfterSelectionChange">
            <summary>Occurs after an item's selection state has changed.</summary>
            <remarks>    When the user makes a selection from one selected item to     another, this event is called twice. The first event     corresponds to the old item being deselected ( SelectionState =     False ) , the second corresponds to the new item being selected     ( SelectionState = True ).     The          Selected property of the item can be used to determine the     new selection state of the item.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BackgroundRightClick">
            <summary>Occurs when the background of a folder is right-clicked.</summary>
            <remarks>If the  ShowBackgroundMenu property is set to True, the background context menu is shown immediately after this event fires.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeColumnAdd">
            <summary>Occurs before a column is about to be added.</summary>
            <remarks>    Use this event to prevent certain columns from being     added to the FileView in details mode. To     prevent the column from being added, set the Cancel field of     the ColumnAddEventArgs object passed to the     event handler to false. The Cancel field is     false by default.     This event is never called for the     'Name' column which is always displayed by     default.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeColumnSort">
            <summary>Occurs before a column is about to be sorted.</summary>
            <remarks>Use this event to specify how the column should be sorted using the SortMethod field of the ColumnSortEventArgs object passed to the event handler</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeFill">
            <summary>Occurs before FileView fills itself with items from the current folder being browsed.</summary>
            <remarks>You can use this item to do any initialization that you might need to perform whenever a new folder is displayed in FileView. Another use of this event is to add custom items using the AddCustomItem method. Custom items added in this event are added before any other items are added.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeFocusedItemChange">
            <summary>Occurs before an item's focused state changes.</summary>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeItemDelete">
            <summary>Occurs before an item is about to be deleted.</summary>
            <remarks>Use this event to free/dispose any userdata associated with the item.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeLabelEdit">
            <summary>Occurs before an item is renamed.</summary>
            <remarks>    Use this event to selectively allow or disallow renaming     of items.     This event is fired only if the AllowItemRenaming     property is set to true</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeSelectionChange">
            <summary>Occurs before an item's selection state changes.</summary>
            <remarks>You can use this method to prevent certain items from being selected or deselected.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.BeforeShellCommandExecute">
            <summary>Occurs before a shell command like Cut,Copy,etc is executed on an item.</summary>
            <remarks>    You can use the          SelectedItems property to determine which items are the     target of the shell command.     The following is a list of common command strings:              "open"         "Explore"         "properties"         "cut"         "copy"         "paste"         "delete"         "link"         "find"         "print"         "goup" - when the user presses the backspace         key.         "refresh" - when the user presses the F5 key.          For a description of what these commands do, see the     documentation of the          ShellCommands enumeration.     Note:     In addition to these common command strings, other     command strings belonging to shell extensions ( e.g : Winzip's     "Extract to Folder.." contextmenu item ) may also be     passed.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.CompareItems">
            <summary>Occurs when two items should be compared during custom sorting.</summary>
            <remarks>    This event is fired only if custom sorting is specified     for the column in the BeforeColumnSort event.     Since this event can be called many times during sorting,     this handler should be as efficient as possible.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.ContextMenuHint">
            <summary>Occurs when the mouse moves over a contextmenu item</summary>
            <remarks>This event occurs when the user moves the mouse pointer over menuitems in the context menu. You can use this event to display the hint message in the status bar of your application.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.CurrentFolderChanged">
            <summary>Occurs when the current folder changes.</summary>
            <remarks>    This event occurs when the FileView     browses to a new folder, for example when the user     double-clicks on a folder or when you set the CurrentFolder or     CurrentPIDL properties. It is called after all items have been     added to FileView.     You can retrieve the current folder which     FileView is browsing by using the          CurrentFolder or          CurrentPIDL properties.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.CustomContextMenuItemSelect">
            <summary>Occurs when a user-defined context menuitem is selected.</summary>
            <remarks>This event is raised when a custom context menuitem is selected. The Caption and the CmdID fields of the CustomContextMenuItemSelectEventArgs object that is passed to the event handler specifies the text and ID of the menuitem</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.DrawItem">
            <summary>Occurs when an item needs to be drawn.</summary>
            <remarks>This event is raised only if the  DrawMode property is set to  FileViewDrawMode.OwnerDraw.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.FileViewDragDrop">
            <summary>Occurs when a drag-and-drop operation is completed.</summary>
            <remarks>Use this event to carry out custom actions in response to a drop or to prevent the default shell drop action from getting executed.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.FileViewDragOver">
            <summary>Occurs when a drag-drop operation moves over FileView.</summary>
            <remarks>Use this event to change the default drop action that will be performed if the drop occurs at that point. You can access the data being dragged using the Data field of the FileViewDragOverEventArgs object that is passed with the event.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.FileViewDragStart">
            <summary>Occurs when a dragdrop operation is initiated</summary>
            <remarks>Use this event to cancel the dragdrop operation or to add custom data for the dragdrop operation or to specify the allowed drop effects for the dragdrop operation.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.GetInfoTip">
            <summary>Occurs before the item infotip is displayed.</summary>
            <remarks>This event can be used to change the default infotip which is displayed for the item.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.GetItemThumbnail">
            <summary>Occurs when the thumbnail for an item is about to be displayed.</summary>
            <remarks>This event is raised only in Thumbnail View.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.HeaderRightClick">
            <summary>Occurs when the column header area is right-clicked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.Initialize">
            <summary>Occurs when FileView is about to be initialized.</summary>
            <remarks>Use this event to specify a starting folder for FileView.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.ItemChecking">
            <summary>Occurs before an item is checked.</summary>
            <remarks>    This event occurs when an item is being checked or     unchecked by clicking on the check box or pressing the     spacebar. You can use this event to selectively allow or     disallow checking of items.     This event is fired only when the ShowCheckBoxes property     is set to true.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.ItemClick">
            <summary>Occurs when an item is clicked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.ItemDblClick">
            <summary>Occurs when an item is double-clicked.</summary>
            <remarks>    This event occurs when the user double-clicks on an item.     If the item is a file, then that file is opened with its     associated application, provided that the AllowFileExecution     property is true. If the item is a folder,     then the contents of the folder are displayed in     FileView, provided that the     AllowDiveIntoFolders property is true.     You can set the Cancel property of the     FileViewCancelEventArgs object passed to the event handler to     prevent the above operations. Also you can define your own     custom operations in this event.     This event is also fired when the user presses the     Enter key to open a selected item.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.ItemRightClick">
            <summary>Occurs when an item is right-clicked.</summary>
            <remarks>    The shell context menu for the right-clicked item is     shown immediately after this event fires. The event can be used     to disallow display of context menu for certain items.</remarks>
        </member>
        <member name="E:LogicNP.FileViewControl.FileViewWPF.PopupContextMenu">
            <summary>Occurs when the background or the item context menu is about to be displayed.</summary>
            <remarks>    You can use this event to modify the context menu which     will be displayed to the user. The ShellMenu field of the     PopupContextMenuEventArgs object that is passed with the event     represents the context menu which will be displayed to the     user.     If          PopupContextMenuEventArgs.BackgroundMenu is False, you can     use the          SelectedItems property to determine the items for which the     contextmenu is about to be displayed.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.FIVDataObject">
            <summary>Represents the data that is being dragged.</summary>
            <remarks>You can access the data using the GetText, GetBinary methods and the Files property. You can set custom data using the SetText, SetBinary methods and the Files property. You can determine whether data in a particular format is present using the GetDataPresent method.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.Empty">
            <summary>Removes all data from the dataobject</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetBinary(System.Int32)">
            <summary>Obsolete.Gets binary data during a dragdrop operation</summary>
            <returns>The binary data in the specified format as a byte array</returns>
            <remarks>This method returns the binary data in the specified format as a byte array ( in the form of a variant). The return value is not valid if data in the specified format is not present. Use the GetDataPresent method to determine whether data in the specified format exists.</remarks>
            <param name="format">The format of the binary data to be retrieved.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetBitmap">
            <summary>Obsolete.Gets bitmap data during a dragdrop operation</summary>
            <returns>Bitmap</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetData">
            <summary>Returns the data associated with the specified data format.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetData(System.Type)">
            <summary>    Returns the data associated with the specified data     format.</summary>
            <remarks>    If this method cannot find data in the specified format,     it attempts to convert the data to the format. If the data     cannot be converted to the specified format, or if the data was     stored with automatic conversion set to false, this method     returns a null reference (Nothing in Visual Basic).     To determine whether data is associated with, or can be     converted to, a format, call GetDataPresent before calling     GetData. Call GetFormats for a list of valid formats for the     data stored in this DataObject.</remarks>
            <returns>The data associated with the specified format, or a null reference (Nothing in Visual Basic).</returns>
            <param name="format">The format of the data to retrieve. See DataFormats enumeration for predefined formats.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetData(System.String)">
            <summary>Returns the data associated with the specified class type format.</summary>
            <remarks>    If this method cannot find data in the specified format,     it attempts to convert the data to the format. If the data     cannot be converted to the specified format, or if the data was     stored with automatic conversion set to false, this method     returns a null reference (Nothing in Visual Basic).     To determine whether data is associated with, or can be     converted to, a format, call GetDataPresent before calling     GetData. Call GetFormats for a list of valid formats for the     data stored in this DataObject.</remarks>
            <returns>The data associated with the specified format, or a null reference (Nothing in Visual Basic).</returns>
            <param name="format">A Type representing the format of the data to retrieve.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetData(System.String,System.Boolean)">
            <summary>    Returns the data associated with the specified data     format, using an automated conversion parameter to determine     whether to convert the data to the format.</summary>
            <remarks>    If this method cannot find data in the specified format,     it attempts to convert the data to the format. If the data     cannot be converted to the specified format, or if the data was     stored with automatic conversion set to false, this method     returns a null reference (Nothing in Visual Basic).     To determine whether data is associated with, or can be     converted to, a format, call GetDataPresent before calling     GetData. Call GetFormats for a list of valid formats for the     data stored in this DataObject.</remarks>
            <returns>The data associated with the specified format, or a null reference (Nothing in Visual Basic).</returns>
            <param name="format">The format of the data to retrieve. See DataFormats enumeration for predefined formats.</param>
            <param name="autoConvert">true to the convert data to the specified format; otherwise, false.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetDataPresent">
            <summary>Gets whether data in the specified format is present during a dragdrop operation</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetDataPresent(System.Type)">
            <summary>Determines whether data stored in this DataObject is associated with, or can be converted to, the specified format.</summary>
            <remarks>None.</remarks>
            <returns>true if data stored in this DataObject is associated with, or can be converted to, the specified format; otherwise, false.</returns>
            <param name="format">A Type representing the format to check for.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetDataPresent(System.String)">
            <summary>Gets whether data in the specified format is present during a dragdrop operation.</summary>
            <remarks>None.</remarks>
            <returns>Boolean</returns>
            <param name="format">The format to check for. See DataFormats for predefined formats.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetDataPresent(System.String,System.Boolean)">
            <summary>Determines whether this DataObject contains data in the specified format or, optionally, contains data that can be converted to the specified format.</summary>
            <remarks>None.</remarks>
            <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
            <param name="format">The format to check for. See DataFormats for predefined formats.</param>
            <param name="autoConvert">true to determine whether data stored in this DataObject can be converted to the specified format; false to check whether the data is in the specified format.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetDataPresent(System.Int32)">
            <summary>Gets whether data in the specified format is present during a dragdrop operation</summary>
            <remarks>None.</remarks>
            <returns>Boolean</returns>
            <param name="format">The format of the data.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetFormats">
            <summary>Returns a list of all formats that data stored in this DataObject is associated with or can be converted to.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetFormats">
            <summary>Returns a list of all formats that data stored in this DataObject is associated with or can be converted to.</summary>
            <returns>An array of type String, containing a list of all formats that are supported by the data stored in this object.</returns>
            <remarks>Call this method to get the supported data formats before calling GetData. See DataFormats for the predefined formats.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetFormats(System.Boolean)">
            <summary>Returns a list of all formats that data stored in this DataObject is associated with or can be converted to, using an automatic conversion parameter to determine whether to retrieve only native data formats or all formats that the data can be converted to.</summary>
            <remarks>Call this method to get the supported data formats before calling GetData. See DataFormats for the predefined formats.</remarks>
            <returns>An array of type String, containing a list of all formats that are supported by the data stored in this object.</returns>
            <param name="autoConvert">true to retrieve all formats that data stored in this DataObject is associated with, or can be converted to; false to retrieve only native data formats.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.GetText">
            <summary>Obsolete.Gets text data during a dragdrop operation</summary>
            <returns>String</returns>
            <remarks>Use this method in the FileViewDragOver and FileViewDragDrop events to access text data, if any, that is being dragged.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.SetBinary(System.Byte[],System.Int32)">
            <summary>Obsolete.Sets binary data for a dragdrop operation</summary>
            <returns>None.</returns>
            <remarks>The binary data must be in the form of a byte array. You this method in the FileViewDragStart event to set binary data for the dragdrop operation.</remarks>
            <param name="data">The binary data.</param>
            <param name="format">The format for the binary data.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.SetBitmap(System.Drawing.Bitmap)">
            <summary>Obsolete.Sets bitmap data for a dragdrop operation</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
            <param name="bmp">The bitmap to be set</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.SetData">
            <summary>Adds an object to the DataObject.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.SetData(System.Object)">
            <summary>Adds the specified object to the DataObject using the object type as the data format.</summary>
            <remarks>If you do not know the format of the target application, you can store data in multiple formats using this method. Data stored using this method can be converted to a compatible format when it is retrieved.</remarks>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.SetData(System.Type,System.Object)">
            <summary>Adds the specified object to the DataObject using the specified format.</summary>
            <remarks>If you do not know the format of the target application, you can store data in multiple formats using this method. Data stored using this method can be converted to a compatible format when it is retrieved.</remarks>
            <param name="format">The format associated with the data. See DataFormats for predefined formats.</param>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.SetData(System.String,System.Object)">
            <summary>Adds the specified object to the DataObject using the specified format.</summary>
            <remarks>If you do not know the format of the target application, you can store data in multiple formats using this method. Data stored using this method can be converted to a compatible format when it is retrieved.</remarks>
            <param name="format">The format associated with the data. See DataFormats for predefined formats.</param>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.FIVDataObject.SetText(System.String)">
            <summary>Obsolete.Sets text data for a dragdrop operation</summary>
            <returns>None.</returns>
            <remarks>Use this method in the FileViewDragStart event to set text data during the dragdrop operation.</remarks>
            <param name="Text">The text data.</param>
        </member>
        <member name="P:LogicNP.FileViewControl.FIVDataObject.Files">
            <summary>Obsolete.Gets/Sets the string array of files which are being dragged</summary>
            <remarks>You can access this property in the FileViewDragOver and FileViewDragDrop events to retrieve the files being dragged. You can also set this property in the FileViewDragStart event to specify the files for a dragdrop operation.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.GetInfoTipEventArgs">
            <summary>Provides data for the GetInfoTip event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.GetInfoTipEventArgs.#ctor(LogicNP.FileViewControl.ListItem,System.String)">
            <summary>Initializes new instance of GetInfoTipEventArgs Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.GetInfoTipEventArgs.InfoTip">
            <summary>Gets/sets the infotip of the item.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.GetInfoTipEventArgs.Item">
            <summary>Gets the item for which the infotip is being displayed</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.GetItemThumbnailEventArgs">
            <summary>Provides data for the  GetItemThumbnail event.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.GetItemThumbnailEventArgs.IconIndex">
            <summary>Gets/Sets the index of the icon in FileView's imagelist that should be used as the thumbnail for the item.</summary>
            <remarks>    The IconIndex member is interpreted depending on the     value of ShowDefault as follows:                                                                                          Value of ShowDefault--&gt;                         ------                         Value of IconIndex                                          True                     False                                                       &gt;= 0                     The thumbnail indicated by IconIndex is                     shown for the item until the real thumbnail for                     the item is extracted.                     The thumbnail indicated by IconIndex is                     shown for the item. The real thumbnail for the                     item is not extracted.                                                       &lt; 0                     The default 'Unknown Document' thumbnail is                     shown for the item until the real thumbnail for                     the item is extracted.                     The real thumbnail for the item is not                     extracted. Instead, a thumbnail generated from                     the large icon for the item is shown for the                     item.                                            </remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.GetItemThumbnailEventArgs.Item">
            <summary>Gets the item for which the thumbnail is being requested.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.GetItemThumbnailEventArgs.ShowDefault">
            <summary>Gets/Sets whether the default thumbnail for the item is shown.</summary>
            <remarks>    The ShowDefault member is interpreted depending on the     value of IconIndex as follows:                                                                                          Value of ShowDefault--&gt;                         ------                         Value of IconIndex                                          True                     False                                                       &gt;= 0                     The thumbnail indicated by IconIndex is                     shown for the item until the real thumbnail for                     the item is extracted.                     The thumbnail indicated by IconIndex is                     shown for the item. The real thumbnail for the                     item is not extracted.                                                       &lt; 0                     The default 'Unknown Document' thumbnail is                     shown for the item until the real thumbnail for                     the item is extracted.                     The real thumbnail for the item is not                     extracted. Instead, a thumbnail generated from                     the large icon for the item is shown for the                     item.                                            </remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.HeaderRightClickEventArgs">
            <summary>Provides data for the HeaderRightClick event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.HeaderRightClickEventArgs.#ctor(LogicNP.FileViewControl.HeaderAreas,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes new instance of HeaderRightClickEventArgs Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderRightClickEventArgs.ColumnIndex">
            <summary>Gets the 0-based index of the column header which was right-clicked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderRightClickEventArgs.HeaderArea">
            <summary>Gets the area of the header which was right-clicked.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.HeaderRightClickEventArgs.Point">
            <summary>Gets the mouse coordinates at which the right-click occurred.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.InitializeEventArgs">
            <summary>Provides data for the  Initialize event of FileView.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.InitializeEventArgs.#ctor">
            <summary>Initializes new instance of InitializeEventArgs Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.InitializeEventArgs.Path">
            <summary>Gets/Sets the full path of the starting folder for FileView.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.InitializeEventArgs.PIDL">
            <summary>Gets/Sets the full PIDL of the starting folder for FileView.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemLabelEditEventArgs">
            <summary>Provides data for BeforeLabelEdit and AfterLabelEdit events.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemLabelEditEventArgs.CancelEdit">
            <summary>Gets/sets whether the event should be cancelled.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemLabelEditEventArgs.Item">
            <summary>Gets the item which is being edited.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.ItemLabelEditEventArgs.Label">
            <summary>Gets the original label of the item for the  BeforeLabelEdit event and the new label for the  AfterLabelEdit event.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ListItem">
            <summary>Represents an item in FileView</summary>
            <remarks>    Each item in the FileView is represented     as ListItem Object. You can get any item by     using the GetListItem method of FileView. To     enumerate the selected items use the FirstSelectedItem and     NextSelectedItem properties. You can also get a     ListItem by specifying the name by which it     appears by using the GetItemFromName method.     The various properties of the ListItem     object define its various visual or non-visual attributes. The     DisplayName and Path properties can be used to retrieve the     displayed text and the full path of the     ListItem.     The visual attributes can be set or retrieved using the     Checked, Selected, IconIndex and State properties.     You can retrieve the shell attributes of the     ListItem using the GetAttributes     method.     You can execute a shell command like 'Cut', 'Copy',     'Explore',etc. on a ListItem using the ExecuteShellCommand     method.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.#ctor(LogicNP.FileViewControl.FileView,System.Int32)">
            <summary>Initializes new instance of ListItem Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.BeginLabelEdit">
            <summary>Puts the item label in edit mode so that the user can rename it.  " --></summary>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.Delete">
            <summary>Deletes the item from the FileView.</summary>
            <returns>None.</returns>
            <remarks>    You can use this method to delete unwanted items from the     FileView. A typical use would be to call this     method in the AfterItemAdd event.     When this method is called, the BeforeItemDelete event is     raised.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.DisplayShellMenu">
            <summary>Displays the shell context menu for the item.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.DisplayShellMenu">
            <summary>Displays the shell context menu for the item.</summary>
            <remarks>Use this method to programmatically display the shell context menu for the item. The context menu is shown from the center point of the item icon.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.DisplayShellMenu(System.Drawing.Point)">
            <summary>Displays the shell context menu for the item at the specified point.</summary>
            <remarks>Use this method to programmatically display the shell context menu for the item. If both the X and Y parameters are -1, then the shell context menu for the item is shown from the center of the item icon.</remarks>
            <param name="pt">The point, in client coordinates, where the context menu should be shown.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.EnsureVisible">
            <summary>Ensures that the item is visible.</summary>
            <returns>None.</returns>
            <remarks>If the item is not already visible, it is scrolled into view.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.ExecuteShellCommand(LogicNP.FileViewControl.ShellCommands)">
            <summary>Executes a shell command on the item.</summary>
            <returns>True if the method was successful, False otherwise.</returns>
            <remarks>This method executes a shell command on the ListItem. For a list of all available commands and their descriptions, read the documentation for the ShellCommands enumeration.</remarks>
            <param name="cmd">The shell command to execute.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetAttributes(LogicNP.FileViewControl.ItemAttributes)">
            <summary>Returns the attributes of the item.</summary>
            <returns>An ItemAttributes value denoting which of the requested attributes are applicable for the item.</returns>
            <remarks>For fast execution, pass as the parameter to this method, only those attributes which you wish to test. For example, if you want to test whether the item is a shortcut, pass ItemAttributes.Link to this method.</remarks>
            <param name="mask">The attributes whose value should be queried.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetBounds(LogicNP.FileViewControl.ItemArea)">
            <summary>             Gets the bounding         rectangle of the item.     </summary>
            <returns>A Rectangle representing the bounding rectangle of the item.</returns>
            <param name="area">The areas of the item which should be considered when calculating the bounding rectangle.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetColumnIconIndex(System.String,System.Int32)">
            <summary>Gets the index of the icon shown for the item in the specified column.</summary>
            <returns>An integer specifying the index of the icon shown for the item in the specified column, or -1 if no icon is displayed or if  EnableColumnIcons property is set to False or if FileView is not in Details View.</returns>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetColumnText(System.String,System.Int32)">
            <summary>Gets the column text for the item.</summary>
            <returns>A string representing the column text for the item. If the current ViewStyle is not set to Details mode, or if the column with the specified name or index does not exist, this method returns an empty string.</returns>
            <remarks>None.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetCurrentIcon">
            <summary>Gets the icon currently being shown for the item.</summary>
            <remarks>FileView has three imagelists : a large imagelist which is used in Icon view; a small imagelist, which is used in Small, List and Details view; and a thumbnail imagelist, which is used in Thumbnail view. This method returns the small icon, large icon or the thumbnail for the item depending on the current viewstyle of FileView.</remarks>
            <returns>The icon currently being shown for the item.</returns>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetDisplayNameEx(LogicNP.FileViewControl.DisplayNameFlags)">
            <summary>Gets the display name of the item in the specified format.</summary>
            <returns>The display name in the specified format.</returns>
            <remarks>This method can also be used to get the target of a shortcut as shown in the above example.</remarks>
            <param name="flags">The format in which the display name should be returned.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetProperty(System.Guid,System.Int32)">
            <summary>Gets the specified property (such as its Comments, Author, Summary, etc) associated with the item.</summary>
            <returns>    The value of the specified property. This value is the     same as that shown for the file or folder in Windows Explorer.     Depending on the type of property, a string, a DateTime, an     integer, etc can be returned. To display the value in string     format, simply call the ToString() method.</returns>
            <remarks>    The various 'fmtid-pid' pairs associated with various     properties can be found in the propkey.h file from the Windows     SDK.</remarks>
            <param name="fmtid">The GUID which uniquely identifies the property along with the 'pid'.</param>
            <param name="pid">The numerical identifier which uniquely identifies the property along with the 'fmtid' parameter above.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetShellIcon(LogicNP.FileViewControl.ShellIconTypes)">
            <summary>Gets the shell icon of the item of the specified type.</summary>
            <remarks>None.</remarks>
            <returns>The shell icon of the item of the specified type.</returns>
            <param name="it">The type of shell icon to retrieve.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetSubItemBounds(System.Int32,LogicNP.FileViewControl.ItemArea)">
            <summary>    Gets the bounding rectangle of the specified     sub-item(column) of the item.</summary>
            <returns>A Rectangle representing the bounding rectangle of the sub-item.</returns>
            <param name="subItemIndex">The index of the sub-item (column) whose bounding rectangle is to be retrieved.</param>
            <param name="area">The areas of the sub-item which should be considered when calculating the bounding rectangle.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.GetSystemInfotip">
            <summary>Gets the infotip for the item.</summary>
            <returns>The infotip for the item as shown in Windows Explorer.</returns>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.IsCustom">
            <summary>Determines if the item is a custom item (not belonging to the shell)</summary>
            <returns>True if the item is a custom item; False otherwise.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.IsFolder">
            <summary>Gets a value indicating whether the item is a folder.</summary>
            <returns>True, if the item is a folder, False otherwise.</returns>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.IsSpecialFolder(LogicNP.FileViewControl.SpecialFolders)">
            <summary>Determines if the item is the specified special folders.</summary>
            <returns>True if the item is the specified special folders; False otherwise.</returns>
            <remarks>None.</remarks>
            <param name="specialFolder">The special folder against which the item should be compared.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.Open">
            <summary>Opens the item if it is a file or changes the current folder if it is a folder</summary>
            <returns>None</returns>
            <remarks>If the item is a file, then that file is opened with its associated application, provided that the AllowFileExecution property is true. If the item is a folder, then the contents of the folder are displayed in FIleView, provided that the AllowDiveIntoFolders property is true.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.SetColumnIconIndex(System.String,System.Int32,System.Int32)">
            <summary>Sets the index of the icon shown for the item in the specified column.</summary>
            <remarks>This method takes effect only if  EnableColumnIcons property is set to True and FileView is in  Details View.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
            <param name="iconIndex">The index of the icon to be shown for the item in the specified column. To remove an icon, set this to -1.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ListItem.SetColumnText(System.String,System.Int32,System.String)">
            <summary>Sets the column text for the item.</summary>
            <returns>None.</returns>
            <remarks>If the current ViewStyle is not set to Details mode, or if the column with the specified name or index does not exist, this method fails.</remarks>
            <param name="columnName">The name of the column. If this parameter is null or an empty string, the columnIndex parameter is used to identify the column.</param>
            <param name="columnIndex">The index of the column. This parameter is ignored if the columnName parameter is used to identify the column.</param>
            <param name="text">The text for the column.</param>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.Checked">
            <summary>Gets/Sets whether the item is checked.</summary>
            <remarks>    You can use this property to see whether the item is     checked or unchecked. You can also check or uncheck the item by     specifying a new value for this property.     This property only takes effect if the ShowCheckBoxes     property of FileView is set to     true and the ShowCheckBox     property of ListItem is set to true.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.CheckState">
            <summary>Gets/Sets the check state of item.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.DisplayName">
            <summary>Gets/Sets the display name of the item.</summary>
            <remarks>Setting this property causes the item to be renamed to the new value just as if the user had renamed the item via the user-interface.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.FileSize">
            <summary>Returns the size of the file represented by the listitem.</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.Hilited">
            <summary>Gets/Sets whether the item is hilited.</summary>
            <remarks>A hilited item appears similar to a selected item. This property can be set to true to temporarily draw an item as selected, such as when it is the target of a dragdrop operation.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.IconIndex">
            <summary>Gets/Sets the index of the icon (in FileView's imagelist) for the item.</summary>
            <remarks>    You can use this property to set the icon of the     ListItem which will be displayed by     FileView. The icon is specified by its index     in the system image list. Initially FileView     always displays the default icon for the     ListIem as shown by Windows Explorer.     If you want to revert to the system default icon, specify     any negative value when setting this property.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.Index">
            <summary>Gets the 1-based index of the item in FileView.</summary>
            <remarks>This index should not be used to uniquely identify an item since the item position within FileView can change depending on whether items are deleted or new items are added.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.OverlayIconIndex">
            <summary>Gets/Sets the overlay icon index for the item.</summary>
            <remarks>Some items such as shortcuts and shared folders display an additional smaller icon over the normal icon. This is called as an overlay icon. Use this property to get/set the overlay icon to display for the ListItem. You can use one of the predefined overlay icons in the OverlayIcons enumeration or the index returned by the SetOverlayIcon method.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.Path">
            <summary>Returns the full path of the item.</summary>
            <remarks>    If the ListItem does not belong to the file system, then     the return value is an empty string.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.Pidl">
            <summary>Returns the relative PIDL of the item.</summary>
            <remarks>This property returns the relative PIDL ( pointer to item identifier list ) of the ListItem. You should not free the pointer that is returned. If you want to use the return value, first make a copy of the PIDL.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.PidlAbsolute">
            <summary>Gets the absolute (fully qualified) PIDL of the item.</summary>
            <remarks>The PIDL returned by this method must be freed using  Utilities.PIDLFree.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.Selected">
            <summary>Gets/Sets whether the item is selected.</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.ShowCheckBox">
            <summary>Gets/Sets whether the check box should be shown for the item.</summary>
            <remarks>You can set this property to control the display of check boxes on a per-ListItem basis, for example you can have check boxes displayed for only read-only folders. Setting this property only has effect if the ShowCheckBoxes property of FileView is set to true.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.State">
            <summary>Gets/Sets the state of the item.</summary>
            <remarks>You can use this property to get or set various states of the ListItem. For a list of all states and their descriptions, see the documentation of ItemStates enumeration.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.Text">
            <summary>Gets/Sets the text of the item.</summary>
            <remarks>This property can be used independently of the DisplayName property. The DisplayName property returns the text for the ListItem as it is displayed in Explorer. This property returns the text of the ListItem as it is shown in FileView.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ListItem.UserData">
            <summary>Gets/Sets user-defined data for the item.</summary>
            <remarks>This property can be used to associate user-defined data for each ListItem. Typically this property is set in the AfterItemAdd event and any cleanup ( freeing up of user-defined data ) should be done in the BeforeDeleteItem event.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.PIDL">
            <summary>Represents a PIDL in the shell's namespace.</summary>
            <remarks>You can use the helper methods of the  Utilities class to make copies of PIDLs, free PIDLs, get PIDLs of special folders or compare PIDLs.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.PIDL.#ctor">
            <summary>Initializes new instance of PIDL ClassInitialises new instance of PIDL Class Initializes new instance of PIDL class.</summary>
            <returns>A PIDL object</returns>
            <remarks>None. None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.PIDL.#ctor(System.IntPtr)">
            <summary>Initializes new instance of PIDL Class</summary>
            <returns>A PIDL object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.PIDL.AreEqual(System.IntPtr,System.IntPtr)">
            <summary>Determines whether the two PIDLs</summary>
            <returns>Boolean</returns>
            <remarks>None.</remarks>
            <param name="pidl1">The first PIDL</param>
            <param name="pidl2">The second PIDL</param>
        </member>
        <member name="M:LogicNP.FileViewControl.PIDL.Compare(System.IntPtr,System.IntPtr)">
            <summary>Compares the two PIDLs</summary>
            <returns>Integer</returns>
            <remarks>None.</remarks>
            <param name="pidl1">The first PIDL</param>
            <param name="pidl2">The second PIDL</param>
        </member>
        <member name="M:LogicNP.FileViewControl.PIDL.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.PIDL.LPI">
            <summary>Gets the pointer to the memory that the PIDL represents.</summary>
            <remarks>None</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.PopupContextMenuEventArgs">
            <summary>Provides data for the PopupContextMenu event.</summary>
        </member>
        <member name="M:LogicNP.FileViewControl.PopupContextMenuEventArgs.#ctor(LogicNP.FileViewControl.ShellContextMenu,System.Boolean)">
            <summary>Initializes new instance of PopupContextMenuEventArgs Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.FileViewControl.PopupContextMenuEventArgs.BackgroundMenu">
            <summary>Gets whether the context menu being shown is a background menu or the item menu.</summary>
        </member>
        <member name="F:LogicNP.FileViewControl.PopupContextMenuEventArgs.ShellMenu">
            <summary>Gets the context menu which is about to be displayed.</summary>
        </member>
        <member name="T:LogicNP.FileViewControl.ShellContextMenu">
            <summary>Represents an item context menu or the background context menu</summary>
            <remarks>Represents an item or background context menu that will be displayed to the user. You can modify this contextmenu using the various methods.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellContextMenu.#ctor(System.IntPtr,LogicNP.FileViewControl.ShellContextMenu)">
            <summary>Initializes new instance of ShellContextMenu Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellContextMenu.AddItem(System.String)">
            <summary>Adds a new menuitem at the end of the contextmenu</summary>
            <returns>The newly added ShellMenuItem.</returns>
            <remarks>None.</remarks>
            <param name="caption">The caption of the new menuitem to be added</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellContextMenu.Clear">
            <summary>Removes all menuitems from the contextmenu</summary>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellContextMenu.FindItem(System.String)">
            <summary>Returns the first menuitem whose caption contains the specified search string</summary>
            <returns>a  ShellMenuItem object</returns>
            <remarks>This method returns the first menuitem whose caption contains the specified search string. The search is case-insensitive. Before the caption of each menuitem is searched, all ampersand characters are removed from it.</remarks>
            <param name="caption">The caption of the menu item to retrieve.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellContextMenu.GetItem(System.Int32)">
            <summary>Returns the menuitem at the specified index in the contextmenu</summary>
            <remarks>If the index is out of range, a null value is returned.</remarks>
            <returns>a  ShellMenuItem object</returns>
            <param name="index">The index of the menu item to retrieve</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellContextMenu.InsertItem(System.String,System.Int32)">
            <summary>Inserts a new menuitem in the contextmenu at the specified index</summary>
            <remarks>This method returns the newly added menuitem. If the index is out of range, a null value is returned.</remarks>
            <returns>a  ShellMenuItem object</returns>
            <param name="caption">The caption for the new menu item.</param>
            <param name="index">The position of the new menu item.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellContextMenu.RemoveItem(System.Int32)">
            <summary>Removes the menuitem at the specified index from the contextmenu</summary>
            <remarks>If the index is out of range then the function fails.</remarks>
            <returns>None.</returns>
            <param name="index">The index of the menuitem to be removed</param>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellContextMenu.ItemCount">
            <summary>Gets the number of menuitems in the contextmenu</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellContextMenu.Parent">
            <summary>Gets the parent contextmenu of this contextmenu</summary>
            <remarks>Use this method to access the parent contextmenu of this contextmenu. If the contextmenu does not have a parent, then a null value is returned.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.ShellMenuItem">
            <summary>Represents a menu item in a context menu</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellMenuItem.#ctor(LogicNP.FileViewControl.ShellContextMenu,System.Int32)">
            <summary>Initializes new instance of ShellMenuItem Class</summary>
            <remarks>None.</remarks>
            <returns>ShellMenuItem</returns>
        </member>
        <member name="M:LogicNP.FileViewControl.ShellMenuItem.SetBitmap(System.Drawing.Bitmap)">
            <summary>Displays the specified bitmap for the menu item.   " --></summary>
            <param name="bitmap">             The bitmap to display for the menu item.                  $$GenericArguments$$filtereditemlist" -->$$Return_Type$$comment" blankformat="" -->     </param>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.BarBreak">
            <summary>Gets or sets a value indicating whether the menuitem is placed on a new line or in a new column</summary>
            <remarks>If this property is set to True, the menu item is placed in a new column; else menu item remains in its default placement in a new line. The default is False.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Break">
            <summary>Gets or sets a value indicating whether the menuitem is placed on a new line or in a new column</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Caption">
            <summary>Gets or sets a value indicating the caption of the menu item</summary>
            <remarks>When you specify a caption for your menu item with the text parameter, you can also specify an access key by placing an '&amp;' before the character to be used as the access key. For example, to specify the "F" in "File" as an access key, you would specify the caption for the menu item as "&amp;File". You can use this feature to provide keyboard navigation for your menus.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Checked">
            <summary>Gets or sets a value indicating whether a check mark appears next to the text of the menu item</summary>
            <remarks>You can use the Checked property in combination with other menu items in a menu to provide state for an application. For example, you can place a check mark on a menu item in a group of items to identify the size of the font to be displayed for the text in an application. You can also use the Checked property to identify the selected menu item in a group of mutually exclusive menu items.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Command">
            <summary>Gets the command that this menu item represents.</summary>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.CommandStr">
            <summary>Gets the language neutral command string for this menu item.</summary>
            <remarks>    The caption of a menu item may change depending on the     language, however, the command string for the menu item is     language neutral and can be used to identify the command     corresponding to the menu item.     Instead of this property, the          Command property can be used to identify a system defined     command such as 'copy', 'paste' or 'properties.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.DefaultItem">
            <summary>Gets or sets a value indicating whether the menu item is the default menu item</summary>
            <remarks>The default menu item for a menu is boldfaced. When the user double-clicks a submenu that contains a default item, the default item is selected, and the submenu is closed. You can use the DefaultItem property to indicate, the default action that is expected in a menu or shortcut menu.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Enabled">
            <summary>Gets or sets a value indicating whether the menu item is enabled</summary>
            <remarks>A menuItem that is disabled is displayed in a gray color to indicate its state. When a parent menu item is disabled, all submenu items are not displayed.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.HasSubMenu">
            <summary>Gets or sets a value indicating whether the menu item has a submenu</summary>
            <remarks>When this property is set to True, the SubMenu property returns the submenu associated with the menu item. If this property is set to False, the SubMenu property of the menu item returns null.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.ID">
            <summary>Gets the Windows identifier for this menu item</summary>
            <remarks>None,</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Index">
            <summary>Gets or sets a value indicating the position of the menu item in its parent menu</summary>
            <remarks>This property provides the indexed position of a menu item in the menu item collection of its parent menu. You can use this property to reposition a menu item to a different location within its menu.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Parent">
            <summary>Gets the menu that contains this menu item</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.RadioChecked">
            <summary>Gets or sets a value indicating whether the menu item, if checked, displays a radio-button instead of a check mark</summary>
            <remarks>Check marks do not necessarily imply a mutually exclusive state for a group of menu items. You can use this property to indicate to the user that the check mark of a menu item is mutually exclusive.</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.Separator">
            <summary>Gets or sets a value indicating whether the menu item is a separator</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.FileViewControl.ShellMenuItem.SubMenu">
            <summary>Gets the submenu, if any, associated with the menu item</summary>
            <remarks>If the HasSubMenu property is True, then this property returns a valid ShellContextMenu object representing the submenu for this menu item, else this property returns null.</remarks>
        </member>
        <member name="T:LogicNP.FileViewControl.StringResourceManager">
            <summary>Represents a collection of localizable strings being used by FileView.</summary>
            <remarks>    Localizable strings are used by FileView in a few places     such as the menu item captions of the background context menu.     The default strings are in English, however you can load other     language strings using the          SetCulture method. The          IsCultureSupported method can be used to determine if a     specified language is supported. If a certain language is not     supported, then you can set the localized strings in that     language yourself using the          Item property     This class is not intended to be used on its own. Rather,     use the          StringResources property of          FileView to access the string manager used by     FileView.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.StringResourceManager.IsCultureSupported(System.Globalization.CultureInfo)">
            <summary>Gets whether strings in the specified language are supported by FileView.</summary>
            <returns>True if FileView can load localized strings in the specified language, false otherwise.</returns>
            <remarks>    If a culture you wish to use is not supported, you can     add localized strings for that culture yourself by using the          Item property.</remarks>
            <param name="cultureInfo">    The language/culture whose support is to be determined.     Currently, strings for the following cultures are included in     FileView :      English, German, French, Italian, Spanish, Polish, Dutch     and Norwegian.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.StringResourceManager.SetCulture(System.Globalization.CultureInfo)">
            <summary>Loads localized strings in the specified language.</summary>
            <returns>True if localized strings in the specified were successfully loaded, false otherwise.</returns>
            <remarks>    Use the          IsCultureSupported method before calling this method to     determine whether the language is supported.     If a culture you wish to use is not supported, you can     add localized strings for that culture yourself by using the          Item property.</remarks>
            <param name="cultureInfo">    The language/culture for which localized strings should     be loaded. Currently, strings for the following cultures are     included in FileView :     English, German, French, Italian, Spanish, Polish, Dutch     and Norwegian.</param>
        </member>
        <member name="P:LogicNP.FileViewControl.StringResourceManager.Item(System.String)">
            <summary>Gets/Sets a localizable string using a constant string key.</summary>
            <remarks>    The following table lists the static fields (of type     string) of the StringResourceManager class and the places where     their corresponding values are used in FileView :                                                                                                           STR_ARRANGEICONS                                            </remarks>
            <param name="key">The constant key string which uniquely identifies a localizable string.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.Utilities">
            <summary>Contains various utility methods</summary>
            <remarks>This class is not intended to be used on its own. Use the     Utilities property of  FileView to access an instance of this class.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.#ctor(LogicNP.FileViewControl.FileView)">
            <summary>Initializes new instance of Utilities Class</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.DoesFilenameMatchWildCard(System.String,System.String)">
            <summary>Determines whether the specified path matches the specified pattern.</summary>
            <returns>True, if the path matches the wildcard pattern; False otherwise.</returns>
            <param name="path">The full path of a file.</param>
            <param name="wildCardPattern">A wildcard pattern to match the path against.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetDisplayNameFromPIDL(LogicNP.FileViewControl.PIDL,LogicNP.FileViewControl.DisplayNameFlags)">
            <summary>Gets the display name for the PIDL.</summary>
            <returns>String</returns>
            <remarks>None.</remarks>
            <param name="pidl">The PIDL whose display name is to be retrieved</param>
            <param name="dsf">Flags which specify the type of display name to retrieve.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetDriveType(System.String)">
            <summary>Gets the drive type of the specified path.</summary>
            <returns>A  DriveType value specifying the drive type of the specified path.</returns>
            <param name="rootPath">The root path of the drive.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetShellIconFromExtension(System.String,LogicNP.FileViewControl.ShellIconTypes)">
            <summary>Gets the shell icon for the specified extension.</summary>
            <returns>An Icon object representing the the shell icon for the specified extension.</returns>
            <param name="extension">The extension for which the shell icon is to be retrieved. This should be of the form ".extension", for example, ".bmp".</param>
            <param name="shellIconType">The type of the shell icon to retrieve.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetShellIconFromPath(System.String,LogicNP.FileViewControl.ShellIconTypes)">
            <summary>Gets the shell icon for the specified file or folder.</summary>
            <returns>An Icon object representing the icon for the specified file or folder.</returns>
            <param name="path">The full path of the file or folder.</param>
            <param name="shellIconType">The type of the shell icon to retrieve.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetShellIconFromPIDL(LogicNP.FileViewControl.PIDL,LogicNP.FileViewControl.ShellIconTypes)">
            <summary>Gets the shell icon for the PIDL.</summary>
            <returns>The shell icon for the PIDL.</returns>
            <remarks>None.</remarks>
            <param name="pidl">The PIDL whose shell icon is to be retrieved.</param>
            <param name="shellIconType">The type of the shell icon to retrieve.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetSpecialFolderPath(LogicNP.FileViewControl.SpecialFolders)">
            <summary>Gets the full path of the specified special folder.</summary>
            <returns>The full path of the specified special folder.</returns>
            <param name="specialFolder">The special folder whose full path is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetSpecialFolderPIDL(LogicNP.FileViewControl.SpecialFolders)">
            <summary>Gets the PIDL for special folders such as the Control Panel.</summary>
            <remarks>Free the returned PIDL with the  PIDLFree method after use.</remarks>
            <returns>A PIDL object representing the PIDL of the special folder.</returns>
            <param name="specialFolder">The special folder whose PIDL is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetStandardSystemIconIndex(LogicNP.FileViewControl.StandardSystemIcon)">
            <summary>Gets the index of the specified standard system icon in the FileView image list.</summary>
            <returns>The index of the specified standard system icon in the FileView image list.</returns>
            <param name="icon">The standard system icon whose index is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetSystemIconIndexFromExtension(System.String)">
            <summary>Gets the index (in FileView's image list) of the icon shown for files of the specified extension.</summary>
            <returns>The index (in FileView's image list) of the icon shown for files of the specified extension.</returns>
            <param name="extension">             The extension for which the icon index is to be         retrieved. This should be in the form ".extension"; for         example, ".bmp" or ".txt".     </param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetSystemIconIndexFromPath(System.String)">
            <summary>Gets the index of the icon shown for the specified file/folder path in the FileView image list.</summary>
            <returns>The index of the icon shown for the specified file/folder path in the FileView image list. If the method fails, the return value is -1.</returns>
            <param name="path">             The path of the file/folder whose icon index is to be         retrieved.     </param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.GetSystemIconIndexFromPIDL(LogicNP.FileViewControl.PIDL)">
            <summary>Gets the index of the icon shown for the specified PIDL in the FileView image list.</summary>
            <returns>The index of the icon shown for the specified PIDL in the FileView image list.</returns>
            <param name="pidl">The fully qualified PIDL of the file/folder.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PathFromPIDL(LogicNP.FileViewControl.PIDL)">
            <summary>Gets the full path of the specified PIDL.</summary>
            <returns>The full path of the specified PIDL.</returns>
            <param name="pidl">The PIDL whose path is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLCompare(LogicNP.FileViewControl.PIDL,LogicNP.FileViewControl.PIDL)">
            <summary>Compares two PIDLs.</summary>
            <returns>Returns zero if the two PIDLs are equal, a value less than zero if the first PIDL is lesser than the second PIDL, and a value greater than zero if the first PIDL is greater than the second PIDL.</returns>
            <param name="pidl1">The fist PIDL.</param>
            <param name="pidl2">The second PIDL.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLConcat(LogicNP.FileViewControl.PIDL,LogicNP.FileViewControl.PIDL)">
            <summary>Concatenates one pidl to another.</summary>
            <remarks>Free the returned PIDL with the PIDLFree method after use.</remarks>
            <returns>A PIDL created from concatenating the two pidls.</returns>
            <param name="pidl1">The first PIDL</param>
            <param name="pidl2">The second PIDL</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLCopy(LogicNP.FileViewControl.PIDL)">
            <summary>Makes a copy of the specified PIDL.</summary>
            <remarks>The copy of the PIDL must be freed after use using the     PIDLFree method.</remarks>
            <returns>A PIDL which is a copy of the specified PIDL.</returns>
            <param name="pidl">The PIDL to copy.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLDecode(System.String)">
            <summary>Gets the PIDL from its encoded string form.</summary>
            <returns>A PIDL object.</returns>
            <remarks>This method should only be used to decode a string obtained by calling the  PIDLEncode method.</remarks>
            <param name="strPidl">The string form of the PIDL obtained using  PIDLEncode</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLEncode(LogicNP.FileViewControl.PIDL)">
            <summary>Gets an encoded string form of the PIDL.</summary>
            <returns>The string form of the PIDL.</returns>
            <remarks>Because PIDLs cannot be serialized/saved, this function can be used to encode a PIDL into its string form which can be serialized/saved. The PIDL can be later retrieved from the string by using the  PIDLDecode method.</remarks>
            <param name="pidl">The PIDL to encode.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLFree(LogicNP.FileViewControl.PIDL)">
            <summary>Frees memory associated with the specified PIDL.</summary>
            <returns>None.</returns>
            <param name="pidl">The PIDL to free</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLFromPath(System.String)">
            <summary>Gets the PIDL corresponding to the specified path.</summary>
            <remarks>Free the returned PIDL with the PIDLFree method after use.</remarks>
            <returns>The PIDL corresponding to the specified path.</returns>
            <param name="path">The path for which the PIDL is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.FileViewControl.Utilities.PIDLSplit(LogicNP.FileViewControl.PIDL,LogicNP.FileViewControl.PIDL@,LogicNP.FileViewControl.PIDL@)">
            <summary>Splits the specified PIDL into two PIDLs.</summary>
            <remarks>    This method splits the PIDL into two parts. The 1st part     consists of the first n-1 IDs, where n is the number of IDs in     the PIDL. The 2nd part consists of the last ID.     The returned PIDLs should be freed using the          PIDLFree function.</remarks>
            <param name="pidl">             The original PIDL.     </param>
            <param name="pidl1">             The first part of the spilt PIDL.     </param>
            <param name="pidl2">             The second part of the spilt PIDL.     </param>
        </member>
        <member name="T:LogicNP.FileViewControl.AfterFillEventHandler">
            <summary>Represents the method that will handle the AfterFill event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.AfterItemAddEventHandler">
            <summary>Represents the method that will handle the AfterItemAdd event of the FileView control.</summary>
            <returns>None.</returns>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate.For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A  FileViewEventArgs that contains the event data</param>
        </member>
        <member name="T:LogicNP.FileViewControl.AfterLabelEditEventHandler">
            <summary>Represents the method that will handle the AfterLabelEdit event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A ItemLabelEditEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.AfterSelectionChangeEventHandler">
            <summary>Represents the method that will handle the  AfterSelectionChange event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BackgroundRightClickEventHandler">
            <summary>Represents the method that will handle the BackgroundRightClick event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A BackgroundClickedEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeColumnAddEventHandler">
            <summary>Represents the method that will handle the BeforeColumnAdd event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A ColumnAddEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeColumnSortEventHandler">
            <summary>Represents the method that will handle the BeforeColumnSort event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A ColumnSortEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeFillEventHandler">
            <summary>Represents the method that will handle the BeforeFill event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeItemDeleteEventHandler">
            <summary>Represents the method that will handle the BeforeItemDelete event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeLabelEditEventHandler">
            <summary>Represents the method that will handle the BeforeLabelEdit event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A ItemLabelEditEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeSelectionChangeEventHandler">
            <summary>Represents the method that will handle the  BeforeSelectionChange event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewCancelEventArgs that contains the event data</param>
        </member>
        <member name="T:LogicNP.FileViewControl.BeforeShellCommandExecuteHandler">
            <summary>Represents the method that will handle the  BeforeShellCommandExecute event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A BeforeShellCommandExecuteEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.CompareItemsEventHandler">
            <summary>Represents the method that will handle the CompareItems event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A CompareItemsEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.ContextMenuHintEventHandler">
            <summary>Represents the method that will handle the ContextMenuHint event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A ContextMenuHintEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.CurrentFolderChangedEventHandler">
            <summary>Represents the method that will handle the CurrentFolderChanged event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.CustomContextMenuItemSelectEventHandler">
            <summary>Represents the method that will handle the CustomContextMenuItemSelect event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A CustomContextMenuItemSelectEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.DrawItemEventHandler">
            <summary>Represents the method that will handle the  DrawItem event of the FileView control.</summary>
            <param name="sender">             The source of the event.     </param>
            <param name="e">A  DrawItemEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewDragDropEventHandler">
            <summary>Represents the method that will handle the FileViewDragDrop event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewDragDropEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewDragOverEventHandler">
            <summary>Represents the method that will handle the FileViewDragOver event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewDragOverEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.FileViewDragStartEventHandler">
            <summary>Represents the method that will handle the FileViewDragStart event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewDragStartEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.GetInfoTipEventHandler">
            <summary>Represents the method that will handle the GetInfoTip event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A GetInfoTipEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.GetItemThumbnailEventHandler">
            <summary>Represents the method that will handle the  GetItemThumbnail event of the FileView control.</summary>
            <param name="sender">             The source of the event.     </param>
            <param name="e">A  GetItemThumbnailEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.HeaderRightClickEventHandler">
            <summary>Represents the method that will handle the  HeaderRightClick event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A HeaderRightClickEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.InitializeEventHandler">
            <summary>Represents the method that will handle the  Initialize event of FileView.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">The data for the event.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemCheckingEventHandler">
            <summary>Represents the method that will handle the ItemChecking event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewCancelEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemClickEventHandler">
            <summary>Represents the method that will handle the ItemClick event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemDblClickEventHandler">
            <summary>Represents the method that will handle the ItemDblClick event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewCancelEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.ItemRightClickEventHandler">
            <summary>Represents the method that will handle the ItemRightClick event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileViewCancelEventArgs that contains the event data.</param>
        </member>
        <member name="T:LogicNP.FileViewControl.PopupContextMenuEventHandler">
            <summary>Represents the method that will handle the  PopupContextMenu event of the FileView control.</summary>
            <remarks>When you create an instance of this delegate, you identify the method that will handle the event. To associate the event with your event handler, concat the instance of this delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see Events and Delegates in MSDN help.</remarks>
            <returns>None.</returns>
            <param name="sender">The source of the event.</param>
            <param name="e">A PopupContextMenuEventArgs that contains the event data.</param>
        </member>
    </members>
</doc>
