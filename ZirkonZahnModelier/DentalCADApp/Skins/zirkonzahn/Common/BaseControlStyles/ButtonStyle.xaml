<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Dash border around the button if it got focus  -->
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4"
                               StrokeThickness="1"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    
    <!-- Base style for Button and RepeatButton -->
    <Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{DynamicResource ButtonFontSize}" />
        <Setter Property="FontFamily" Value="{DynamicResource ButtonFontFamily}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="4,1,1,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid Background="{TemplateBinding Background}">						
						<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>						
						<Border Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
							
						<Border Name="OuterBorder" BorderBrush="{DynamicResource BrandBrush2BorderMouseOver}" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" />
					</Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
							<Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:00:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:00:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>														
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
							<Setter TargetName="OuterBorder" Property="Opacity" Value="1" />
							<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource BrandBrush2Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<!-- Base style for MessageBoxButton -->
    <Style x:Key="MessageBoxButtonStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type Button}" >
		<Setter Property="Background" Value="{DynamicResource DisabledTextBoxOuterBorder}"/>
		<Setter Property="Height" Value="64"/>
		<Setter Property="UseLayoutRounding" Value="true"/>
		<Setter Property="Margin" Value="0,5"/>
	</Style>
	
    <!-- Button -->
    <Style x:Key="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type Button}"/>
	
    <!-- RepeatButton -->
    <Style x:Key="{x:Type RepeatButton}" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type RepeatButton}" >
		<Setter Property="Background" Value="Transparent" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Background" Value="Transparent" />
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>
