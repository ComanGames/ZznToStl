<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:DentalGUIHelper;assembly=DentalConfig" >   
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
	
	<Style x:Key="TopControlbutton" TargetType="{x:Type local:ImageAndTextButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="BorderThickness" Value="1" />
		<Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
        <Setter Property="Width" Value="70" />
        <Setter Property="Height" Value="Auto" />
		<Setter Property="Margin" Value="5,0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="TextDock" Value="Bottom" />
        <Setter Property="TextMargin" Value="4,5,4,5" />
        <Setter Property="ContentWidth" Value="25" />
        <Setter Property="ContentHeight" Value="25" />     
		<Setter Property="Padding" Value="0,20,0,2" />     
        <Setter Property="FontSize" Value="{DynamicResource NormalFontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageAndTextButton}">
                    <DockPanel Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <!-- Content (= Image) with circle around it -->
                        <Grid x:Name="grid"  Margin="{TemplateBinding Padding}" DockPanel.Dock="Left"
                              Visibility="{TemplateBinding ShowContent, Converter={StaticResource BooleanToVisibilityConverter}}">

                                    <!-- Content, e.g. Icon -->
									<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Width="{TemplateBinding ContentWidth}" Height="{TemplateBinding ContentHeight}"													
                                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="true"
                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
               

                        <!-- Text -->
                        <Grid Name="textContainer"  VerticalAlignment="Center" Margin="{TemplateBinding TextMargin}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TextBlock x:Name="PART_TextBlockMain" Text="{TemplateBinding Text}" Foreground="{TemplateBinding Foreground}"
                                       FontSize="{TemplateBinding FontSize}" FontFamily="{DynamicResource ButtonFontFamily}"
                                    TextWrapping="WrapWithOverflow" 
                                   Visibility="{TemplateBinding ShowText, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   HorizontalAlignment="Left" VerticalAlignment="Center" />
						   <TextBlock Grid.Row="1"  x:Name="PART_TextBlockDescription" Text="{TemplateBinding Description}" Foreground="{DynamicResource ContentAndTextButtonDescriptionTextBrush}"
                                   FontSize="{DynamicResource NormalFontSize}"  FontFamily="{DynamicResource ButtonFontFamily}" Margin="0 2 0 0"
                                   TextWrapping="WrapWithOverflow" 
                                   Visibility="{TemplateBinding ShowDescription, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                    </DockPanel>					
                    <ControlTemplate.Triggers>
                        <Trigger Property="TextDock" Value="Right">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Left" />
                        </Trigger>
                        <Trigger Property="TextDock" Value="Left">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Right" />
                        </Trigger>
                        <Trigger Property="TextDock" Value="Top">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Center" />
                        </Trigger>
                        <Trigger Property="TextDock" Value="Bottom">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="textContainer" Property="TextBlock.TextAlignment" Value="Center" />
                        </Trigger>
						 <Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource GrayBrush7}"/>									
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">                           
							<Setter Property="Background" Value="{DynamicResource GrayBrush7}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	 <Style x:Key="TopControlTogglebutton" TargetType="{x:Type local:ImageAndTextToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="BorderThickness" Value="1" />
		<Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
        <Setter Property="Width" Value="70" />
        <Setter Property="Height" Value="Auto" />
		<Setter Property="Margin" Value="5,0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="TextDock" Value="Bottom" />
        <Setter Property="TextMargin" Value="4,5,4,5" />
        <Setter Property="ContentWidth" Value="25" />
        <Setter Property="ContentHeight" Value="25" />
		<Setter Property="Padding" Value="0,20,0,2" />     
        <Setter Property="FontSize" Value="{DynamicResource NormalFontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageAndTextToggleButton}">					
                    <DockPanel Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <!-- Content (= Image) with circle around it -->
                        <Grid x:Name="grid"  Margin="{TemplateBinding Padding}" DockPanel.Dock="Left" 
                              Visibility="{TemplateBinding ShowContent, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <!-- Content, e.g. Icon -->
									<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														Width="{TemplateBinding ContentWidth}" Height="{TemplateBinding ContentHeight}"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"	UseLayoutRounding="true"
														VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>

                        <!-- Text -->
                        <Grid Name="textContainer"  VerticalAlignment="Center" Margin="{TemplateBinding TextMargin}" >
                            <TextBlock x:Name="PART_TextBlockMain" Text="{TemplateBinding Text}" Foreground="{TemplateBinding Foreground}"
                                       FontSize="{TemplateBinding FontSize}" FontFamily="{DynamicResource ButtonFontFamily}"
                                    TextWrapping="WrapWithOverflow"
                                   Visibility="{TemplateBinding ShowText, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   HorizontalAlignment="Left" VerticalAlignment="Center" />
                        </Grid>
                    </DockPanel>					
                    <ControlTemplate.Triggers>
                        <Trigger Property="TextDock" Value="Right">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Left" />
                        </Trigger>
                        <Trigger Property="TextDock" Value="Left">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Right" />
                        </Trigger>
                        <Trigger Property="TextDock" Value="Top">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Center" />
                        </Trigger>
                        <Trigger Property="TextDock" Value="Bottom">
                            <Setter TargetName="grid" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="textContainer" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="textContainer" Property="TextBlock.TextAlignment" Value="Center" />
                        </Trigger>
						 <Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource GrayBrush7}"/>									
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">                           
							<Setter Property="Background" Value="{DynamicResource GrayBrush7}"/>
                        </Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Background" Value="{DynamicResource GrayBrush7}"/>
						</Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<Style x:Key="TopControlPopupButton" BasedOn="{StaticResource TopControlbutton}" TargetType="{x:Type local:ImageAndTextButton}">
		<Setter Property="Background" Value="{DynamicResource GrayBrush7}" />
		<Setter Property="Width" Value="145" />
		<Setter Property="Margin" Value="0,5,0,0" />
		<Setter Property="Height" Value="44" />
		<Setter Property="TextDock" Value="Right" />
		<Setter Property="ContentWidth" Value="18" />
        <Setter Property="ContentHeight" Value="18" />
		<Setter Property="TextMargin" Value="5,2,5,2" />
		<Setter Property="Padding" Value="13,13,8,13" /> 
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>									
			</Trigger>
		</Style.Triggers>	
	</Style>
	
	<Style x:Key="TopControlPopupToggleButton" BasedOn="{StaticResource TopControlTogglebutton}" TargetType="{x:Type local:ImageAndTextToggleButton}">
		<Setter Property="Background" Value="{DynamicResource GrayBrush7}" />
		<Setter Property="Width" Value="145" />
		<Setter Property="Margin" Value="0,5,0,0" />
		<Setter Property="Height" Value="44" />
		<Setter Property="TextDock" Value="Right" />
		<Setter Property="ContentWidth" Value="18" />
        <Setter Property="ContentHeight" Value="18" />
		<Setter Property="TextMargin" Value="5,2,5,2" />
		<Setter Property="Padding" Value="13,13,8,13" /> 
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>									
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>
			</Trigger>
		</Style.Triggers>	
	</Style>
</ResourceDictionary>